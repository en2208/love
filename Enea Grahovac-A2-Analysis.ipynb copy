{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Enea Grahovac A2_Classification Model Analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Introduction: \n",
    "\n",
    "I'm performing analysis on a food delivery business with very interesting business model. \n",
    "The idea is to find insights that will help business leaders to increase their bottom line. \n",
    "In the analysis I will analyze dataset with 12 months old data and try to recognize most often patterns \n",
    "generated by the current clients will lead to valuable business insights and hopefully answer the question of why most of the clients leave after approximately 12 months. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Part 1.\n",
    "As I first step I'm importing all  the packages necessary to perform the analysis, then I'm loading my original data which is from Apprentice Chef Dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
      "  \"(https://pypi.org/project/six/).\", FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd                                  # data science essentials\n",
    "import matplotlib.pyplot as plt                      # essential graphical output\n",
    "import seaborn as sns                                # enhanced graphical output\n",
    "import statsmodels.formula.api as smf                # regression modeling\n",
    "from sklearn.model_selection import train_test_split # train/test split\n",
    "import math as math                                  #for math function\n",
    "import random            as rand                     # random number gen\n",
    "from sklearn.model_selection import train_test_split # train-test split\n",
    "from sklearn.linear_model import LogisticRegression  # logistic regression\n",
    "from sklearn.metrics import confusion_matrix         # confusion matrix\n",
    "from sklearn.metrics import roc_auc_score            # auc score\n",
    "# libraries for classification trees\n",
    "from sklearn.tree import DecisionTreeClassifier      # classification trees\n",
    "from sklearn.tree import export_graphviz             # exports graphics\n",
    "from sklearn.externals.six import StringIO           # saves objects in memory\n",
    "from IPython.display import Image                    # displays on frontend\n",
    "\n",
    "# importing libraries\n",
    "from sklearn.neighbors import KNeighborsClassifier   # KNN for classification\n",
    "from sklearn.neighbors import KNeighborsRegressor    # KNN for regression\n",
    "from sklearn.preprocessing import StandardScaler     # standard scaler\n",
    "# new packages\n",
    "from sklearn.model_selection import GridSearchCV     # hyperparameter tuning\n",
    "from sklearn.metrics import make_scorer              # customizable scorer\n",
    "# new packages\n",
    "from sklearn.ensemble import RandomForestClassifier     # random forest\n",
    "from sklearn.metrics import confusion_matrix            # confusion matrix\n",
    "from sklearn.ensemble import RandomForestClassifier     # random forest\n",
    "from sklearn.ensemble import GradientBoostingClassifier # gbm\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# setting pandas print options\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)\n",
    "\n",
    "\n",
    "import gender_guesser.detector as gender # guess gender based on (given) name\n",
    "\n",
    "\n",
    "################################################################################\n",
    "# Load Data\n",
    "################################################################################\n",
    "\n",
    "#Loading Data \n",
    "# use this space to load the original dataset\n",
    "# MAKE SURE TO SAVE THE ORIGINAL FILE AS original_df\n",
    "# Example: original_df = pd.read_excel('Apprentice Chef Dataset.xlsx')\n",
    "\n",
    "original_df     = pd.read_excel('Apprentice_Chef_Dataset.xlsx')\n",
    "\n",
    "#print (original_df)\n",
    "\n",
    "#print(original_df.columns)\n",
    "\n",
    "chef=original_df\n",
    "\n",
    "#print(chef_df)\n",
    "\n",
    "#checking if any null\n",
    "#chef.isnull().sum()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "#chef.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I'm removing any possible missing values and imputing all user defined functions "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# user-defined functions\n",
    "\n",
    "#########################\n",
    "# mv_flagger\n",
    "#########################\n",
    "def mv_flagger(chef):\n",
    "    \"\"\"\n",
    "Flags all columns that have missing values with 'm-COLUMN_NAME'.\n",
    "\n",
    "PARAMETERS\n",
    "----------\n",
    "df : DataFrame to flag missing values\n",
    "\n",
    "\n",
    "RETURNS\n",
    "-------\n",
    "DataFrame with missing value flags.\"\"\"\n",
    "\n",
    "\n",
    "    for col in chef:\n",
    "\n",
    "        if chef[col].isnull().astype(int).sum() > 0:\n",
    "            df['m_'+col] = chef[col].isnull().astype(int)\n",
    "            \n",
    "    return chef\n",
    "\n",
    "\n",
    "\n",
    "#########################\n",
    "# text_split_feature\n",
    "#########################\n",
    "def text_split_feature(col, chef, sep=' ', new_col_name='number_of_names'):\n",
    "    \"\"\"\n",
    "Splits values in a string Series (as part of a DataFrame) and sums the number\n",
    "of resulting items. Automatically appends summed column to original DataFrame.\n",
    "\n",
    "PARAMETERS\n",
    "----------\n",
    "col          : column to split\n",
    "df           : DataFrame where column is located\n",
    "sep          : string sequence to split by, default ' '\n",
    "new_col_name : name of new column after summing split, default\n",
    "               'number_of_names'\n",
    "\"\"\"\n",
    "\n",
    "        \n",
    "        \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comment 2: \n",
    "\n",
    "As a next step I'm checking if my data contains any missing values. Since it does contain 47 missing values under the column name FAMILY_NAME, I'm looping over missing values and then filling over missing values. Next step is checking if all my missing values have been filled and then saving the \"clean\" dataset under the name \"Apprentice_Chef_Dataset_with_flags.xlsx\". I'm performing my further analysis on previously mentioned dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "        \n",
    "\n",
    "# making sure all missing values have been taken care of\n",
    "chef.isnull().any().any()\n",
    "\n",
    "fill = 0\n",
    "# displaying the first five rows of the DataFrame\n",
    "#chef_df.head(n = 5)\n",
    "\n",
    "# imputing 'FAMILY_NAME'\n",
    "\n",
    "chef['FAMILY_NAME'] = chef ['FAMILY_NAME'].fillna(fill)\n",
    "\n",
    "chef.to_excel(\"Apprentice_Chef_Dataset_with_flags.xlsx\",\n",
    "                 index = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#chef.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comment 3: \n",
    "\n",
    "I'm creating data frame from the flagged dataset. This step is crucial to prevent working with missing values. \n",
    "Also, I'm pulling out the excel file that contains all the explanations of each variable in order to ease performing the analysis.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Column</th>\n",
       "      <th>Data Type</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>REVENUE</td>\n",
       "      <td>float</td>\n",
       "      <td>Total revenue generated over the first year of...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CROSS_SELL_SUCCESS</td>\n",
       "      <td>integer</td>\n",
       "      <td>Success of promoting Halfway There (1 = SUCCES...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NAME</td>\n",
       "      <td>string</td>\n",
       "      <td>Full name of customer (collected upon initial ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>EMAIL</td>\n",
       "      <td>string</td>\n",
       "      <td>Email of customer (collected upon initial regi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FIRST_NAME</td>\n",
       "      <td>string</td>\n",
       "      <td>First name of customer (collected upon initial...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>FAMILY_NAME</td>\n",
       "      <td>string</td>\n",
       "      <td>Last name of customer (collected upon initial ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>TOTAL_MEALS_ORDERED</td>\n",
       "      <td>integer</td>\n",
       "      <td>Total count of meals ordered per customer account</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>UNIQUE_MEALS_PURCH</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of unique meal sets ordered per customer...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>CONTACTS_W_CUSTOMER_SERVICE</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of times a customer made contact with cu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>PRODUCT_CATEGORIES_VIEWED</td>\n",
       "      <td>integer</td>\n",
       "      <td>Total number of meal categories viewed (online...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AVG_TIME_PER_SITE_VISIT</td>\n",
       "      <td>float</td>\n",
       "      <td>Average platform (web or mobile) visit time pe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>MOBILE_NUMBER</td>\n",
       "      <td>integer</td>\n",
       "      <td>Customer registered with a mobile or landline ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>CANCELLATIONS_BEFORE_NOON</td>\n",
       "      <td>integer</td>\n",
       "      <td>Number of meals canceled before 12 PM as per c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>CANCELLATIONS_AFTER_NOON</td>\n",
       "      <td>integer</td>\n",
       "      <td>Number of meals canceled after 3 PM as per can...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>TASTES_AND_PREFERENCES</td>\n",
       "      <td>integer</td>\n",
       "      <td>Customer specified their tastes and preference...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>MOBILE_LOGINS</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of logins on the mobile platform (app)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>PC_LOGINS</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of logins on the web platform (website)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>WEEKLY_PLAN</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of weeks a customer subscribed to the we...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>EARLY_DELIVERIES</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of orders that we delivered BEFORE the a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>LATE_DELIVERIES</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of orders that we delivered AFTER the al...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>PACKAGE_LOCKER</td>\n",
       "      <td>integer</td>\n",
       "      <td>Customer's building has a package locker servi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>REFRIGERATED_LOCKER</td>\n",
       "      <td>integer</td>\n",
       "      <td>Package room has a refrigerated locker</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>FOLLOWED_RECOMMENDATIONS_PCT</td>\n",
       "      <td>float</td>\n",
       "      <td>Percentage of time a customer followed meal re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>AVG_PREP_VID_TIME</td>\n",
       "      <td>float</td>\n",
       "      <td>Average time in seconds a customer watched  in...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>LARGEST_ORDER_SIZE</td>\n",
       "      <td>integer</td>\n",
       "      <td>Largest number of meals a customer has ordered...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>MASTER_CLASSES_ATTENDED</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of times a customer attended master clas...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>MEDIAN_MEAL_RATING</td>\n",
       "      <td>integer</td>\n",
       "      <td>Median meal satisfaction rating by customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>AVG_CLICKS_PER_VISIT</td>\n",
       "      <td>float</td>\n",
       "      <td>Average number of clicks per site visit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>TOTAL_PHOTOS_VIEWED</td>\n",
       "      <td>integer</td>\n",
       "      <td>Count of photos viewed on web and mobile platf...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Column Data Type                                        Description\n",
       "0                        REVENUE     float  Total revenue generated over the first year of...\n",
       "1             CROSS_SELL_SUCCESS   integer  Success of promoting Halfway There (1 = SUCCES...\n",
       "2                           NAME    string  Full name of customer (collected upon initial ...\n",
       "3                          EMAIL    string  Email of customer (collected upon initial regi...\n",
       "4                     FIRST_NAME    string  First name of customer (collected upon initial...\n",
       "5                    FAMILY_NAME    string  Last name of customer (collected upon initial ...\n",
       "6            TOTAL_MEALS_ORDERED   integer  Total count of meals ordered per customer account\n",
       "7             UNIQUE_MEALS_PURCH   integer  Count of unique meal sets ordered per customer...\n",
       "8    CONTACTS_W_CUSTOMER_SERVICE   integer  Count of times a customer made contact with cu...\n",
       "9      PRODUCT_CATEGORIES_VIEWED   integer  Total number of meal categories viewed (online...\n",
       "10       AVG_TIME_PER_SITE_VISIT     float  Average platform (web or mobile) visit time pe...\n",
       "11                 MOBILE_NUMBER   integer  Customer registered with a mobile or landline ...\n",
       "12     CANCELLATIONS_BEFORE_NOON   integer  Number of meals canceled before 12 PM as per c...\n",
       "13      CANCELLATIONS_AFTER_NOON   integer  Number of meals canceled after 3 PM as per can...\n",
       "14        TASTES_AND_PREFERENCES   integer  Customer specified their tastes and preference...\n",
       "15                 MOBILE_LOGINS   integer       Count of logins on the mobile platform (app)\n",
       "16                     PC_LOGINS   integer      Count of logins on the web platform (website)\n",
       "17                   WEEKLY_PLAN   integer  Count of weeks a customer subscribed to the we...\n",
       "18              EARLY_DELIVERIES   integer  Count of orders that we delivered BEFORE the a...\n",
       "19               LATE_DELIVERIES   integer  Count of orders that we delivered AFTER the al...\n",
       "20                PACKAGE_LOCKER   integer  Customer's building has a package locker servi...\n",
       "21           REFRIGERATED_LOCKER   integer             Package room has a refrigerated locker\n",
       "22  FOLLOWED_RECOMMENDATIONS_PCT     float  Percentage of time a customer followed meal re...\n",
       "23             AVG_PREP_VID_TIME     float  Average time in seconds a customer watched  in...\n",
       "24            LARGEST_ORDER_SIZE   integer  Largest number of meals a customer has ordered...\n",
       "25       MASTER_CLASSES_ATTENDED   integer  Count of times a customer attended master clas...\n",
       "26            MEDIAN_MEAL_RATING   integer        Median meal satisfaction rating by customer\n",
       "27          AVG_CLICKS_PER_VISIT     float            Average number of clicks per site visit\n",
       "28           TOTAL_PHOTOS_VIEWED   integer  Count of photos viewed on web and mobile platf..."
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "################################################################################\n",
    "# Load Data with flags\n",
    "################################################################################\n",
    "\n",
    "original_df_with_flags = pd.read_excel('Apprentice_Chef_Dataset_with_flags.xlsx')\n",
    "\n",
    "chef_original=original_df\n",
    "\n",
    "#chef_original.describe().round(2)\n",
    "\n",
    "# pulling up data dictionary\n",
    "chef_description = pd.read_excel('Apprentice_Chef_Data_Dictionary.xlsx')\n",
    "\n",
    "\n",
    "# displaying the data dictionary\n",
    "#chef_description\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "chef_df=chef"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Part 3. Feature Engineering and Dataset Standardization\n",
    "\n",
    "I'm starting my feature engineering process as well as DataSet Standardization. \n",
    "As an intial step I'm choosing columns that makes most business sense to work on. \n",
    "And create one new column; average spent per meal per customer which might be valuable in predicting my model later. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:38: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:42: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REVENUE</th>\n",
       "      <th>TOTAL_MEALS_ORDERED</th>\n",
       "      <th>MOBILE_NUMBER</th>\n",
       "      <th>TASTES_AND_PREFERENCES</th>\n",
       "      <th>CROSS_SELL_SUCCESS</th>\n",
       "      <th>WEEKLY_PLAN</th>\n",
       "      <th>FOLLOWED_RECOMMENDATIONS_PCT</th>\n",
       "      <th>MASTER_CLASSES_ATTENDED</th>\n",
       "      <th>AVG_TIME_PER_SITE_VISIT</th>\n",
       "      <th>MEDIAN_MEAL_RATING</th>\n",
       "      <th>UNIQUE_MEALS_PURCH</th>\n",
       "      <th>CONTACTS_W_CUSTOMER_SERVICE</th>\n",
       "      <th>PRODUCT_CATEGORIES_VIEWED</th>\n",
       "      <th>CANCELLATIONS_BEFORE_NOON</th>\n",
       "      <th>CANCELLATIONS_AFTER_NOON</th>\n",
       "      <th>MOBILE_LOGINS</th>\n",
       "      <th>PC_LOGINS</th>\n",
       "      <th>EARLY_DELIVERIES</th>\n",
       "      <th>LATE_DELIVERIES</th>\n",
       "      <th>PACKAGE_LOCKER</th>\n",
       "      <th>REFRIGERATED_LOCKER</th>\n",
       "      <th>AVG_PREP_VID_TIME</th>\n",
       "      <th>LARGEST_ORDER_SIZE</th>\n",
       "      <th>AVG_CLICKS_PER_VISIT</th>\n",
       "      <th>TOTAL_PHOTOS_VIEWED</th>\n",
       "      <th>avg_spent_per_meal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2107.23</td>\n",
       "      <td>74.63</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.71</td>\n",
       "      <td>0.68</td>\n",
       "      <td>11.33</td>\n",
       "      <td>35.41</td>\n",
       "      <td>0.60</td>\n",
       "      <td>99.22</td>\n",
       "      <td>2.79</td>\n",
       "      <td>4.9</td>\n",
       "      <td>6.98</td>\n",
       "      <td>5.38</td>\n",
       "      <td>1.40</td>\n",
       "      <td>0.17</td>\n",
       "      <td>1.48</td>\n",
       "      <td>5.52</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.97</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.11</td>\n",
       "      <td>150.14</td>\n",
       "      <td>4.44</td>\n",
       "      <td>13.51</td>\n",
       "      <td>106.43</td>\n",
       "      <td>36.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1138.23</td>\n",
       "      <td>55.31</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.47</td>\n",
       "      <td>13.57</td>\n",
       "      <td>26.58</td>\n",
       "      <td>0.64</td>\n",
       "      <td>62.29</td>\n",
       "      <td>0.76</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.28</td>\n",
       "      <td>3.04</td>\n",
       "      <td>1.55</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.58</td>\n",
       "      <td>2.32</td>\n",
       "      <td>2.74</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.32</td>\n",
       "      <td>49.46</td>\n",
       "      <td>1.55</td>\n",
       "      <td>2.33</td>\n",
       "      <td>181.01</td>\n",
       "      <td>19.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>131.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>33.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1350.00</td>\n",
       "      <td>39.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>72.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>114.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1740.00</td>\n",
       "      <td>60.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>30.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>94.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>6.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>145.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>33.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2670.00</td>\n",
       "      <td>95.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>60.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>117.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>6.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>173.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>15.00</td>\n",
       "      <td>174.00</td>\n",
       "      <td>45.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8793.00</td>\n",
       "      <td>493.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>90.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1645.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>19.0</td>\n",
       "      <td>18.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>564.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>1600.00</td>\n",
       "      <td>153.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       REVENUE  TOTAL_MEALS_ORDERED  MOBILE_NUMBER  TASTES_AND_PREFERENCES  CROSS_SELL_SUCCESS  WEEKLY_PLAN  FOLLOWED_RECOMMENDATIONS_PCT  MASTER_CLASSES_ATTENDED  AVG_TIME_PER_SITE_VISIT  MEDIAN_MEAL_RATING  UNIQUE_MEALS_PURCH  CONTACTS_W_CUSTOMER_SERVICE  PRODUCT_CATEGORIES_VIEWED  CANCELLATIONS_BEFORE_NOON  CANCELLATIONS_AFTER_NOON  MOBILE_LOGINS  PC_LOGINS  EARLY_DELIVERIES  LATE_DELIVERIES  PACKAGE_LOCKER  REFRIGERATED_LOCKER  AVG_PREP_VID_TIME  LARGEST_ORDER_SIZE  AVG_CLICKS_PER_VISIT  TOTAL_PHOTOS_VIEWED  avg_spent_per_meal\n",
       "count  1946.00              1946.00        1946.00                 1946.00             1946.00      1946.00                       1946.00                  1946.00                  1946.00             1946.00              1946.0                      1946.00                    1946.00                    1946.00                   1946.00        1946.00    1946.00           1946.00          1946.00         1946.00              1946.00            1946.00             1946.00               1946.00              1946.00             1946.00\n",
       "mean   2107.23                74.63           0.88                    0.71                0.68        11.33                         35.41                     0.60                    99.22                2.79                 4.9                         6.98                       5.38                       1.40                      0.17           1.48       5.52              1.49             2.97            0.36                 0.11             150.14                4.44                 13.51               106.43               36.00\n",
       "std    1138.23                55.31           0.33                    0.45                0.47        13.57                         26.58                     0.64                    62.29                0.76                 2.5                         2.28                       3.04                       1.55                      0.43           0.53       0.58              2.32             2.74            0.48                 0.32              49.46                1.55                  2.33               181.01               19.39\n",
       "min     131.00                11.00           0.00                    0.00                0.00         0.00                          0.00                     0.00                    10.00                1.00                 1.0                         1.00                       1.00                       0.00                      0.00           0.00       4.00              0.00             0.00            0.00                 0.00              33.00                0.00                  5.00                 0.00                9.00\n",
       "25%    1350.00                39.00           1.00                    0.00                0.00         1.00                         10.00                     0.00                    72.00                2.00                 3.0                         5.00                       3.00                       0.00                      0.00           1.00       5.00              0.00             1.00            0.00                 0.00             114.00                3.00                 12.00                 0.00               22.00\n",
       "50%    1740.00                60.00           1.00                    1.00                1.00         7.00                         30.00                     1.00                    94.00                3.00                 5.0                         7.00                       5.00                       1.00                      0.00           1.00       6.00              0.00             2.00            0.00                 0.00             145.00                4.00                 13.00                 0.00               33.00\n",
       "75%    2670.00                95.00           1.00                    1.00                1.00        13.00                         60.00                     1.00                   117.00                3.00                 7.0                         8.00                       8.00                       2.00                      0.00           2.00       6.00              3.00             4.00            1.00                 0.00             173.00                5.00                 15.00               174.00               45.00\n",
       "max    8793.00               493.00           1.00                    1.00                1.00        52.00                         90.00                     3.00                  1645.00                5.00                19.0                        18.00                      10.00                      13.00                      3.00           3.00       7.00              9.00            19.00            1.00                 1.00             564.00               11.00                 19.00              1600.00              153.00"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#picking the columns that make the most business sense and most understandable\n",
    "\n",
    "chef_df = chef_df[['REVENUE','TOTAL_MEALS_ORDERED', #continue\n",
    "'EMAIL',\n",
    "'MOBILE_NUMBER',\n",
    "'TASTES_AND_PREFERENCES',\n",
    "'CROSS_SELL_SUCCESS',\n",
    "'FIRST_NAME',\n",
    "'WEEKLY_PLAN',\n",
    "'FOLLOWED_RECOMMENDATIONS_PCT',\n",
    "'MASTER_CLASSES_ATTENDED',\n",
    "'AVG_TIME_PER_SITE_VISIT',\n",
    "'MEDIAN_MEAL_RATING',\n",
    "'UNIQUE_MEALS_PURCH',\n",
    "'CONTACTS_W_CUSTOMER_SERVICE',\n",
    "'PRODUCT_CATEGORIES_VIEWED',\n",
    "'CANCELLATIONS_BEFORE_NOON',\n",
    "'CANCELLATIONS_AFTER_NOON',\n",
    "'MOBILE_LOGINS',\n",
    "'PC_LOGINS',\n",
    "'EARLY_DELIVERIES',\n",
    "'LATE_DELIVERIES',\n",
    "'PACKAGE_LOCKER',\n",
    "'REFRIGERATED_LOCKER',\n",
    "'AVG_PREP_VID_TIME',\n",
    "'LARGEST_ORDER_SIZE',\n",
    "'AVG_CLICKS_PER_VISIT',\n",
    "'TOTAL_PHOTOS_VIEWED'            \n",
    "]]\n",
    "# CHECK THIS PART!\n",
    "\n",
    "#creating a column that shows average spendige per meal \n",
    "\n",
    "chef_df['avg_spent_per_meal'] = chef_df['REVENUE']/chef_df['TOTAL_MEALS_ORDERED']\n",
    "           \n",
    "\n",
    "chef_df['REVENUE'] = [math.floor(i) for i in chef_df['REVENUE']]\n",
    "chef_df['FOLLOWED_RECOMMENDATIONS_PCT'] = [math.floor(i) for i in chef_df['FOLLOWED_RECOMMENDATIONS_PCT']]\n",
    "chef_df['AVG_TIME_PER_SITE_VISIT'] = [math.floor(i) for i in chef_df['AVG_TIME_PER_SITE_VISIT']]\n",
    "chef_df['avg_spent_per_meal'] = [math.floor(i) for i in chef_df['avg_spent_per_meal']]\n",
    "chef_df['AVG_PREP_VID_TIME'] = [math.floor(i) for i in chef_df['AVG_PREP_VID_TIME']]\n",
    "chef_df['CROSS_SELL_SUCCESS'] = [math.floor(i) for i in chef_df['CROSS_SELL_SUCCESS']]\n",
    "\n",
    "#chef_df.describe().round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.1.\n",
    "As a next step I will graph my data in histogram in order to detect some outliers and potential defects in Dataset. This step is also crucial to set up my THRESHOLDS. \n",
    "From this 'outliers analysis most interesting. I'm commenting all the graphs that might not be too significant at this point. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'UNIQUE_MEALS_PURCH')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "########################\n",
    "# Visual EDA (Histograms)\n",
    "########################\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (10, 8))\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.distplot(chef_df['REVENUE'],\n",
    "             bins  = 'fd',\n",
    "             color = 'g')\n",
    "plt.xlabel('REVENUE')\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.distplot(chef_df['CROSS_SELL_SUCCESS'],\n",
    "           #  bins  = 'fd',\n",
    "           #  color = 'g')\n",
    "#plt.xlabel('CROSS_SELL_SUCCESS')\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (10, 8))\n",
    "plt.subplot(2, 2,3 )\n",
    "sns.distplot(chef_df['TOTAL_MEALS_ORDERED'],\n",
    "             bins  = 'fd',\n",
    "             color = 'g')\n",
    "plt.xlabel('TOTAL_MEALS_ORDERED')\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (10, 8))\n",
    "plt.subplot(2, 2, 4)\n",
    "sns.distplot(chef_df['UNIQUE_MEALS_PURCH'],\n",
    "             bins  = 'fd',\n",
    "             color = 'g')\n",
    "plt.xlabel('UNIQUE_MEALS_PURCH')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 1)\n",
    "#sns.distplot(chef_df['CONTACTS_W_CUSTOMER_SERVICE'],\n",
    "           #  bins  = 'fd',\n",
    "           #  color = 'g')\n",
    "#plt.xlabel('CONTACTS_W_CUSTOMER_SERVICE')\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.distplot(chef_df['PRODUCT_CATEGORIES_VIEWED'],\n",
    "          #   bins  = 'fd',\n",
    "          #   color = 'g')\n",
    "#plt.xlabel('PRODUCT_CATEGORIES_VIEWED')\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 4)\n",
    "#sns.distplot(chef_df['AVG_TIME_PER_SITE_VISIT'],\n",
    "           #  bins  = 'fd',\n",
    "          #   color = 'g')\n",
    "#plt.xlabel('AVG_TIME_PER_SITE_VISIT')\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 1)\n",
    "#sns.distplot(chef_df['FOLLOWED_RECOMMENDATIONS_PCT'],\n",
    "           #  bins  = 'fd',\n",
    "           #  color = 'g')\n",
    "#plt.xlabel('FOLLOWED_RECOMMENDATIONS_PCT')\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.distplot(chef_df['AVG_PREP_VID_TIME'],\n",
    "            # bins  = 'fd',\n",
    "             #color = 'g')\n",
    "#plt.xlabel('AVG_PREP_VID_TIME')\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 3)\n",
    "#sns.distplot(chef_df['LARGEST_ORDER_SIZE'],\n",
    "             #bins  = 'fd',\n",
    "             #color = 'g')\n",
    "#plt.xlabel('LARGEST_ORDER_SIZE')\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 4)\n",
    "#sns.distplot(chef_df['AVG_CLICKS_PER_VISIT'],\n",
    "            # bins  = 'fd',\n",
    "            # color = 'g')\n",
    "#plt.xlabel('AVG_CLICKS_PER_VISIT')\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 1)\n",
    "#sns.distplot(chef_df['TOTAL_PHOTOS_VIEWED'],\n",
    "           #  bins  = 'fd',\n",
    "           #  color = 'g')\n",
    "#plt.xlabel('TOTAL_PHOTOS_VIEWED')\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.distplot(chef_df['CANCELLATIONS_BEFORE_NOON'],\n",
    "             #bins  = 'fd',\n",
    "            # color = 'g')\n",
    "#plt.xlabel('CANCELLATIONS_BEFORE_NOON')\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 3)\n",
    "#sns.distplot(chef_df['CANCELLATIONS_AFTER_NOON'],\n",
    "          #   bins  = 'fd',\n",
    "           #  color = 'g')\n",
    "#plt.xlabel('CANCELLATIONS_AFTER_NOON')\n",
    "\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 4)\n",
    "#sns.distplot(chef_df['WEEKLY_PLAN'],\n",
    "            # bins  = 'fd',\n",
    "            # color = 'g')\n",
    "#plt.xlabel('WEEKLY_PLAN')\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 1)\n",
    "#sns.distplot(chef_df['MASTER_CLASSES_ATTENDED'],\n",
    "           #  bins  = 'fd',\n",
    "           #3  color = 'g')\n",
    "#plt.xlabel('MASTER_CLASSES_ATTENDED')\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.distplot(chef_df['LATE_DELIVERIES'],\n",
    "           #  bins  = 'fd',\n",
    "           #  color = 'g')\n",
    "#plt.xlabel('LATE_DELIVERIES')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I'm setting my THRESHOLD based on my outliers analysis and creating new columns for each of the threshold. I will use later some of the most significant columns to perform my logit regression. Setting out lier that will contribute towards the goal of our business."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# THRESHOLD\n",
    "\n",
    "total_meals_ordered_hi       =25\n",
    "total_meals_ordered_low      =17\n",
    "unique_meals_purch_hi        =10\n",
    "contact_cs_hi                =10\n",
    "avg_time_per_visit_hi        =260\n",
    "cancellation_before_noon_hi  =3\n",
    "cancellation_after_noon_hi   =0.6\n",
    "weekly_plan_low              =1\n",
    "weekly_plan_hi               =15\n",
    "median_meal_rating_hi        =4\n",
    "avg_clicks_per_visit_hi      =7.5\n",
    "photos_viewed_low            =0.5 #binary\n",
    "photos_viewed_hi             =399\n",
    "median_meal_rating_med       =3\n",
    "MOBILE_NUMBER_at = 0.5 #binary\n",
    "MOBILE_LOGINS_bin =0.5 #binary\n",
    "MOBILE_LOGINS_bin1=0.5 #binary\n",
    "MOBILE_LOGINS_bin2=0.5 #binary\n",
    "PC_LOGINS_bin=0.5 #binary\n",
    "avg_spent_per_meal_hi = 75 # opened\n",
    "\n",
    "\n",
    "\n",
    "# CREATING New columns\n",
    "# New columns\n",
    "\n",
    "#total meals \n",
    "chef_df['total_meals_ordered_out'] = 0\n",
    "condition_1 = chef_df.loc[0:,'total_meals_ordered_out'][chef_df['TOTAL_MEALS_ORDERED'] > total_meals_ordered_hi]\n",
    "chef_df['total_meals_ordered_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "# Mobile Number\n",
    "chef_df['MOBILE_NUMBER_at'] = 0\n",
    "condition_1 = chef_df.loc[0:,'MOBILE_NUMBER_at'][chef_df['MOBILE_NUMBER'] == MOBILE_NUMBER_at]\n",
    "\n",
    "chef_df['MOBILE_NUMBER_at'].replace(to_replace = condition_1, value = 1, inplace    = True)\n",
    "    \n",
    "#unique meals purchase\n",
    "chef_df['unique_meals_purch_out']=0\n",
    "condition_1 = chef_df.loc[0:,'unique_meals_purch_out'][chef_df['UNIQUE_MEALS_PURCH'] > unique_meals_purch_hi]\n",
    "chef_df['unique_meals_purch_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#customer service \n",
    "chef_df['contact_cs_out'] = 0\n",
    "condition_1 = chef_df.loc[0:,'contact_cs_out'][chef_df['CONTACTS_W_CUSTOMER_SERVICE'] > contact_cs_hi]\n",
    "chef_df['contact_cs_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#average time per visit \n",
    "chef_df['avg_time_per_visit_out'] = 0\n",
    "condition_1 = chef_df.loc[0:,'avg_time_per_visit_out'][chef_df['AVG_TIME_PER_SITE_VISIT'] > avg_time_per_visit_hi]\n",
    "chef_df['avg_time_per_visit_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#cancellation before noon \n",
    "chef_df['cancellation_before_noon_out'] = 0\n",
    "condition_1 = chef_df.loc[0:,'cancellation_before_noon_out'][chef_df['CANCELLATIONS_BEFORE_NOON'] > cancellation_before_noon_hi]\n",
    "chef_df['cancellation_before_noon_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#cancellation after noon\n",
    "chef_df['cancellation_after_noon_out'] = 0\n",
    "condition_1 = chef_df.loc[0:,'cancellation_after_noon_out'][chef_df['CANCELLATIONS_AFTER_NOON'] > cancellation_after_noon_hi]\n",
    "chef_df['cancellation_after_noon_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#Weekly plan out hi \n",
    "chef_df['weekly_plan_out_low'] = 0\n",
    "condition_1 = chef_df.loc[0:,'weekly_plan_out_low'][chef_df['WEEKLY_PLAN'] > weekly_plan_low]\n",
    "chef_df['weekly_plan_out_low'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#Weekly plan out low\n",
    "chef_df['weekly_plan_out_hi'] = 0\n",
    "condition_1 = chef_df.loc[0:,'weekly_plan_out_hi'][chef_df['WEEKLY_PLAN'] > weekly_plan_hi]\n",
    "chef_df['weekly_plan_out_hi'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#Median Meal Rating\n",
    "chef_df['median_meal_rating_out'] = 0\n",
    "condition_1 = chef_df.loc[0:,'median_meal_rating_out'][chef_df['MEDIAN_MEAL_RATING'] > median_meal_rating_hi]\n",
    "chef_df['median_meal_rating_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#Cross Sell Success/Avg vid.time\n",
    "chef_df['cross_followed'] =chef_df['CROSS_SELL_SUCCESS']*chef_df['FOLLOWED_RECOMMENDATIONS_PCT']\n",
    "chef_df['avg_vid_time_click'] =chef_df['AVG_PREP_VID_TIME']/chef_df['AVG_CLICKS_PER_VISIT']\n",
    "chef_df['meals_ordered_click'] =chef_df['TOTAL_MEALS_ORDERED']/chef_df['AVG_CLICKS_PER_VISIT']\n",
    "\n",
    "#Total Meals Ordered out\n",
    "chef_df['total_meals_ordered_low_out'] = 0\n",
    "condition_1 = chef_df.loc[0:,'total_meals_ordered_low_out'][chef_df['REVENUE'] > total_meals_ordered_low]\n",
    "chef_df['total_meals_ordered_low_out'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#Contact Service Out \n",
    "chef_df['CONTACT_C_SERVICE_OUT'] = 0\n",
    "condition_1 = chef_df.loc[0:,'CONTACT_C_SERVICE_OUT'][chef_df['CONTACTS_W_CUSTOMER_SERVICE'] > contact_cs_hi]\n",
    "chef_df['CONTACT_C_SERVICE_OUT'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#Avg Click Per visit \n",
    "chef_df['AVG_CLICK_PER_VISIT_OUT'] = 0\n",
    "condition_1 = chef_df.loc[0:,'AVG_CLICK_PER_VISIT_OUT'][chef_df['AVG_CLICKS_PER_VISIT'] > avg_clicks_per_visit_hi]\n",
    "chef_df['AVG_CLICK_PER_VISIT_OUT'].replace(to_replace = condition_1, value = 1, inplace = True)\n",
    "\n",
    "#Mobile Logins - binary\n",
    "chef_df['MOBILE_LOGINS_bin'] = 0\n",
    "condition_1 = chef_df.loc[0:,'MOBILE_LOGINS_bin'][chef_df['MOBILE_LOGINS'] >= MOBILE_LOGINS_bin1]                                                    [chef_df['MOBILE_LOGINS'] <= MOBILE_LOGINS_bin2]\n",
    "\n",
    "chef_df['MOBILE_LOGINS_bin'].replace(to_replace = condition_1,\n",
    "                                value      = 1,\n",
    "                                inplace    = True)\n",
    "\n",
    "#PC Logins - binary\n",
    "chef_df['PC_LOGINS_bin'] = 0\n",
    "condition_1 = chef_df.loc[0:,'PC_LOGINS_bin'][chef_df['PC_LOGINS'] > PC_LOGINS_bin ]\n",
    "\n",
    "chef_df['PC_LOGINS_bin'].replace(to_replace = condition_1,\n",
    "                                value      = 1,\n",
    "                                inplace    = True)\n",
    "\n",
    "\n",
    "avg_spent_per_meal_hi = 75 # opened\n",
    "                                            \n",
    "                                             \n",
    "#Average spent per meal - hi\n",
    "chef_df['avg_spent_per_meal_hi'] = 0\n",
    "condition_1 = chef_df.loc[0:,'avg_spent_per_meal_hi'][chef_df['avg_spent_per_meal'] >= avg_spent_per_meal_hi]\n",
    "\n",
    "chef_df['avg_spent_per_meal_hi'].replace(to_replace = condition_1,\n",
    "                                value      = 1,\n",
    "                                inplace    = True)\n",
    "\n",
    "\n",
    "\n",
    "#chef_df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.3. \n",
    "I've decided to create some more graphical representations to get deeper insights which may help me to decide on my next steps. \n",
    "The insights I'm getting are following: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'TOTAL_PHOTOS_VIEWED')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "########################\n",
    "# Visual EDA (Scatterplots)\n",
    "########################\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 1)\n",
    "#sns.scatterplot(x = chef_df['TOTAL_MEALS_ORDERED'],\n",
    "             #   y = chef_df['REVENUE'],\n",
    "             #  color = 'g')\n",
    "#plt.xlabel('TOTAL_MEALS_ORDERED')\n",
    "\n",
    "########################\n",
    "\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.scatterplot(x = chef_df['UNIQUE_MEALS_PURCH'],\n",
    "        #        y = chef_df['REVENUE'],\n",
    "       #         color = 'y')\n",
    "#plt.xlabel('UNIQUE_MEALS_PURCH')\n",
    "\n",
    "########################\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "sns.scatterplot(x = chef_df['CONTACTS_W_CUSTOMER_SERVICE'],\n",
    "                y = chef_df['REVENUE'],\n",
    "                color = 'orange')\n",
    "plt.xlabel('CONTACTS_W_CUSTOMER_SERVICE')\n",
    "\n",
    "########################\n",
    "#plt.subplot(2, 2, 4)\n",
    "#sns.scatterplot(x = chef_df['AVG_TIME_PER_SITE_VISIT'],\n",
    "        #        y = chef_df['REVENUE'],\n",
    "        #        color = 'r')\n",
    "#plt.xlabel('AVG_TIME_PER_SITE_VISIT')\n",
    "#plt.tight_layout()\n",
    "#plt.savefig('Chef Data Scatterplots 1 of 5.png')\n",
    "#plt.show()\n",
    "\n",
    "########################\n",
    "########################\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (10, 8))\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.scatterplot(x = chef_df['MEDIAN_MEAL_RATING'],\n",
    "                y = chef_df['REVENUE'],\n",
    "                color = 'g')\n",
    "plt.xlabel('MEDIAN_MEAL_RATING')\n",
    "\n",
    "########################\n",
    "\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.scatterplot(x = chef_df['CROSS_SELL_SUCCESS'],\n",
    "        #        y = chef_df['REVENUE'],\n",
    "        #        color = 'y')\n",
    "#plt.xlabel('CROSS_SELL_SUCCESS')\n",
    "\n",
    "########################\n",
    "\n",
    "#plt.subplot(2, 2, 3)\n",
    "#sns.scatterplot(x = chef_df['CANCELLATIONS_BEFORE_NOON'],\n",
    "             #   y = chef_df['REVENUE'],\n",
    "              #  color = 'orange')\n",
    "#plt.xlabel('CANCELLATIONS_BEFORE_NOON')\n",
    "\n",
    "########################\n",
    "\n",
    "plt.subplot(2, 2, 4)\n",
    "sns.scatterplot(x = chef_df['CANCELLATIONS_AFTER_NOON'],\n",
    "                y = chef_df['REVENUE'],\n",
    "                color = 'r')\n",
    "plt.xlabel('CANCELLATIONS_AFTER_NOON')\n",
    "plt.tight_layout()\n",
    "plt.savefig('Housing Data Scatterplots 2 of 5.png')\n",
    "plt.show()\n",
    "\n",
    "########################\n",
    "########################\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 1)\n",
    "#sns.scatterplot(x = chef_df['WEEKLY_PLAN'],\n",
    "            #    y = chef_df['REVENUE'],\n",
    "            #    color = 'y')\n",
    "#plt.xlabel('WEEKLY_PLAN')\n",
    "\n",
    "########################\n",
    "\n",
    "#plt.subplot(2, 2, 2)\n",
    "#sns.scatterplot(x = chef_df['EARLY_DELIVERIES'],\n",
    "               # y = chef_df['REVENUE'],\n",
    "                #color = 'orange')\n",
    "#plt.xlabel('EARLY_DELIVERIES')\n",
    "\n",
    "########################\n",
    "\n",
    "#plt.subplot(2, 2, 3)\n",
    "#sns.scatterplot(x = chef_df['LATE_DELIVERIES'],\n",
    "                #y = chef_df['REVENUE'],\n",
    "               # color = 'r')\n",
    "#plt.xlabel('LATE_DELIVERIES')\n",
    "\n",
    "########################\n",
    "\n",
    "#plt.subplot(2, 2, 4)\n",
    "#sns.scatterplot(x = chef_df['AVG_PREP_VID_TIME'],\n",
    "               # y = chef_df['REVENUE'],\n",
    "                #color = 'g')\n",
    "#plt.xlabel('AVG_PREP_VID_TIME')\n",
    "#plt.tight_layout()\n",
    "#plt.savefig('Chef Data Scatterplots 3 of 5.png')\n",
    "#plt.show()\n",
    "\n",
    "########################\n",
    "########################\n",
    "\n",
    "#fig, ax = plt.subplots(figsize = (10, 8))\n",
    "#plt.subplot(2, 2, 1)\n",
    "#sns.scatterplot(x = chef_df['LARGEST_ORDER_SIZE'],\n",
    "               # y = chef_df['REVENUE'],\n",
    "               # color = 'y')\n",
    "#plt.xlabel('LARGEST_ORDER_SIZE')\n",
    "\n",
    "########################\n",
    "\n",
    "plt.subplot(2, 2, 2)\n",
    "sns.scatterplot(x = chef_df['AVG_CLICKS_PER_VISIT'],\n",
    "                y = chef_df['REVENUE'],\n",
    "                color = 'orange')\n",
    "plt.xlabel('AVG_CLICKS_PER_VISIT')\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "sns.scatterplot(x = chef_df['TOTAL_PHOTOS_VIEWED'],\n",
    "                y = chef_df['REVENUE'],\n",
    "                color = 'g')\n",
    "plt.xlabel('TOTAL_PHOTOS_VIEWED')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.4. \n",
    "Creating a list and combining domaing group with orginal data frame. As a next step I'm looping over each e-mail address and splitting email and domains and finally splitting list into dataframes for the sake of further analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>addam.osgrey</td>\n",
       "      <td>passport.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>aegon.blackfyre</td>\n",
       "      <td>jnj.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aegon.frey.(son.of.aenys)</td>\n",
       "      <td>gmail.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>aegon.targaryen.(son.of.rhaegar)</td>\n",
       "      <td>ibm.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>aegon.v.targaryen</td>\n",
       "      <td>goldmansacs.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1941</th>\n",
       "      <td>yandry</td>\n",
       "      <td>yahoo.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1942</th>\n",
       "      <td>yorkel</td>\n",
       "      <td>gmail.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1943</th>\n",
       "      <td>young.henly</td>\n",
       "      <td>gmail.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1944</th>\n",
       "      <td>ysilla</td>\n",
       "      <td>protonmail.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1945</th>\n",
       "      <td>ysilla.royce</td>\n",
       "      <td>hotmail.com</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1946 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     0                1\n",
       "0                         addam.osgrey     passport.com\n",
       "1                      aegon.blackfyre          jnj.com\n",
       "2            aegon.frey.(son.of.aenys)        gmail.com\n",
       "3     aegon.targaryen.(son.of.rhaegar)          ibm.com\n",
       "4                    aegon.v.targaryen  goldmansacs.com\n",
       "...                                ...              ...\n",
       "1941                            yandry        yahoo.com\n",
       "1942                            yorkel        gmail.com\n",
       "1943                       young.henly        gmail.com\n",
       "1944                            ysilla   protonmail.com\n",
       "1945                      ysilla.royce      hotmail.com\n",
       "\n",
       "[1946 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creatinf a list\n",
    "\n",
    "email_lst = []# concatenating with original ChefDF\n",
    "chef_df['domain_group'] = pd.Series(email_lst)\n",
    "\n",
    "\n",
    "# checking results\n",
    "chef_df['domain_group'].value_counts()\n",
    "\n",
    "\n",
    "# looping over each email address\n",
    "for index, col in chef_df.iterrows():\n",
    "    \n",
    "    # splitting email domain at '@'\n",
    "    split_email = chef_df.loc[index, 'EMAIL'].split(sep = '@')\n",
    "    \n",
    "    # appending placeholder_lst with the results\n",
    "    email_lst.append(split_email)\n",
    "    \n",
    "\n",
    "\n",
    "# converting placeholder_lst into a DataFrame \n",
    "email_df = pd.DataFrame(email_lst)\n",
    "\n",
    "\n",
    "# displaying the results\n",
    "email_df\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# renaming column to concatenate\n",
    "email_df.columns = ['0' , 'email_domain']\n",
    "\n",
    "\n",
    "# concatenating personal_email_domain with friends DataFrame\n",
    "chef_df = pd.concat([chef_df, email_df['email_domain']],\n",
    "                     axis = 1)\n",
    "\n",
    "\n",
    "# printing value counts of personal_email_domain\n",
    "#chef_df.loc[: ,'email_domain'].value_counts()\n",
    "#chef_df.describe().round(2)\n",
    "#sns.catplot(x=\"email_domain\", kind=\"count\", palette=\"ch:.25\", data=chef_df);\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.5. Email Classification\n",
    "In this step I'm grouping all the email addresses based on its domain. We have three major groups : professional, personal and junk e-mails. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REVENUE</th>\n",
       "      <th>TOTAL_MEALS_ORDERED</th>\n",
       "      <th>MOBILE_NUMBER</th>\n",
       "      <th>TASTES_AND_PREFERENCES</th>\n",
       "      <th>CROSS_SELL_SUCCESS</th>\n",
       "      <th>WEEKLY_PLAN</th>\n",
       "      <th>FOLLOWED_RECOMMENDATIONS_PCT</th>\n",
       "      <th>MASTER_CLASSES_ATTENDED</th>\n",
       "      <th>AVG_TIME_PER_SITE_VISIT</th>\n",
       "      <th>MEDIAN_MEAL_RATING</th>\n",
       "      <th>UNIQUE_MEALS_PURCH</th>\n",
       "      <th>CONTACTS_W_CUSTOMER_SERVICE</th>\n",
       "      <th>PRODUCT_CATEGORIES_VIEWED</th>\n",
       "      <th>CANCELLATIONS_BEFORE_NOON</th>\n",
       "      <th>CANCELLATIONS_AFTER_NOON</th>\n",
       "      <th>MOBILE_LOGINS</th>\n",
       "      <th>PC_LOGINS</th>\n",
       "      <th>EARLY_DELIVERIES</th>\n",
       "      <th>LATE_DELIVERIES</th>\n",
       "      <th>PACKAGE_LOCKER</th>\n",
       "      <th>REFRIGERATED_LOCKER</th>\n",
       "      <th>AVG_PREP_VID_TIME</th>\n",
       "      <th>LARGEST_ORDER_SIZE</th>\n",
       "      <th>AVG_CLICKS_PER_VISIT</th>\n",
       "      <th>TOTAL_PHOTOS_VIEWED</th>\n",
       "      <th>avg_spent_per_meal</th>\n",
       "      <th>total_meals_ordered_out</th>\n",
       "      <th>MOBILE_NUMBER_at</th>\n",
       "      <th>unique_meals_purch_out</th>\n",
       "      <th>contact_cs_out</th>\n",
       "      <th>avg_time_per_visit_out</th>\n",
       "      <th>cancellation_before_noon_out</th>\n",
       "      <th>cancellation_after_noon_out</th>\n",
       "      <th>weekly_plan_out_low</th>\n",
       "      <th>weekly_plan_out_hi</th>\n",
       "      <th>median_meal_rating_out</th>\n",
       "      <th>cross_followed</th>\n",
       "      <th>avg_vid_time_click</th>\n",
       "      <th>meals_ordered_click</th>\n",
       "      <th>total_meals_ordered_low_out</th>\n",
       "      <th>CONTACT_C_SERVICE_OUT</th>\n",
       "      <th>AVG_CLICK_PER_VISIT_OUT</th>\n",
       "      <th>MOBILE_LOGINS_bin</th>\n",
       "      <th>PC_LOGINS_bin</th>\n",
       "      <th>avg_spent_per_meal_hi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.00</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.0</td>\n",
       "      <td>1946.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2107.23</td>\n",
       "      <td>74.63</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.71</td>\n",
       "      <td>0.68</td>\n",
       "      <td>11.33</td>\n",
       "      <td>35.41</td>\n",
       "      <td>0.60</td>\n",
       "      <td>99.22</td>\n",
       "      <td>2.79</td>\n",
       "      <td>4.9</td>\n",
       "      <td>6.98</td>\n",
       "      <td>5.38</td>\n",
       "      <td>1.40</td>\n",
       "      <td>0.17</td>\n",
       "      <td>1.48</td>\n",
       "      <td>5.52</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.97</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.11</td>\n",
       "      <td>150.14</td>\n",
       "      <td>4.44</td>\n",
       "      <td>13.51</td>\n",
       "      <td>106.43</td>\n",
       "      <td>36.00</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.01</td>\n",
       "      <td>29.80</td>\n",
       "      <td>11.84</td>\n",
       "      <td>6.07</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.11</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1138.23</td>\n",
       "      <td>55.31</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.47</td>\n",
       "      <td>13.57</td>\n",
       "      <td>26.58</td>\n",
       "      <td>0.64</td>\n",
       "      <td>62.29</td>\n",
       "      <td>0.76</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.28</td>\n",
       "      <td>3.04</td>\n",
       "      <td>1.55</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.58</td>\n",
       "      <td>2.32</td>\n",
       "      <td>2.74</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.32</td>\n",
       "      <td>49.46</td>\n",
       "      <td>1.55</td>\n",
       "      <td>2.33</td>\n",
       "      <td>181.01</td>\n",
       "      <td>19.39</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.08</td>\n",
       "      <td>30.79</td>\n",
       "      <td>5.70</td>\n",
       "      <td>5.49</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>131.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>33.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.94</td>\n",
       "      <td>0.63</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1350.00</td>\n",
       "      <td>39.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>72.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>114.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.88</td>\n",
       "      <td>2.76</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1740.00</td>\n",
       "      <td>60.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>30.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>94.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>6.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>145.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>33.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>10.86</td>\n",
       "      <td>4.53</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2670.00</td>\n",
       "      <td>95.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>60.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>117.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>6.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>173.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>15.00</td>\n",
       "      <td>174.00</td>\n",
       "      <td>45.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>60.00</td>\n",
       "      <td>14.07</td>\n",
       "      <td>7.60</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8793.00</td>\n",
       "      <td>493.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>90.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1645.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>19.0</td>\n",
       "      <td>18.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>564.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>1600.00</td>\n",
       "      <td>153.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>90.00</td>\n",
       "      <td>55.60</td>\n",
       "      <td>51.50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       REVENUE  TOTAL_MEALS_ORDERED  MOBILE_NUMBER  TASTES_AND_PREFERENCES  CROSS_SELL_SUCCESS  WEEKLY_PLAN  FOLLOWED_RECOMMENDATIONS_PCT  MASTER_CLASSES_ATTENDED  AVG_TIME_PER_SITE_VISIT  MEDIAN_MEAL_RATING  UNIQUE_MEALS_PURCH  CONTACTS_W_CUSTOMER_SERVICE  PRODUCT_CATEGORIES_VIEWED  CANCELLATIONS_BEFORE_NOON  CANCELLATIONS_AFTER_NOON  MOBILE_LOGINS  PC_LOGINS  EARLY_DELIVERIES  LATE_DELIVERIES  PACKAGE_LOCKER  REFRIGERATED_LOCKER  AVG_PREP_VID_TIME  LARGEST_ORDER_SIZE  AVG_CLICKS_PER_VISIT  TOTAL_PHOTOS_VIEWED  avg_spent_per_meal  total_meals_ordered_out  MOBILE_NUMBER_at  unique_meals_purch_out  contact_cs_out  avg_time_per_visit_out  cancellation_before_noon_out  cancellation_after_noon_out  weekly_plan_out_low  weekly_plan_out_hi  median_meal_rating_out  cross_followed  avg_vid_time_click  meals_ordered_click  total_meals_ordered_low_out  CONTACT_C_SERVICE_OUT  AVG_CLICK_PER_VISIT_OUT  MOBILE_LOGINS_bin  PC_LOGINS_bin  avg_spent_per_meal_hi\n",
       "count  1946.00              1946.00        1946.00                 1946.00             1946.00      1946.00                       1946.00                  1946.00                  1946.00             1946.00              1946.0                      1946.00                    1946.00                    1946.00                   1946.00        1946.00    1946.00           1946.00          1946.00         1946.00              1946.00            1946.00             1946.00               1946.00              1946.00             1946.00                  1946.00            1946.0                 1946.00         1946.00                 1946.00                        1946.0                      1946.00              1946.00              1946.0                 1946.00         1946.00             1946.00              1946.00                       1946.0                1946.00                  1946.00             1946.0         1946.0                1946.00\n",
       "mean   2107.23                74.63           0.88                    0.71                0.68        11.33                         35.41                     0.60                    99.22                2.79                 4.9                         6.98                       5.38                       1.40                      0.17           1.48       5.52              1.49             2.97            0.36                 0.11             150.14                4.44                 13.51               106.43               36.00                     0.89               0.0                    0.01            0.11                    0.01                           0.1                         0.14                 0.72                 0.2                    0.01           29.80               11.84                 6.07                          1.0                   0.11                     1.00                0.0            1.0                   0.05\n",
       "std    1138.23                55.31           0.33                    0.45                0.47        13.57                         26.58                     0.64                    62.29                0.76                 2.5                         2.28                       3.04                       1.55                      0.43           0.53       0.58              2.32             2.74            0.48                 0.32              49.46                1.55                  2.33               181.01               19.39                     0.32               0.0                    0.08            0.31                    0.09                           0.3                         0.35                 0.45                 0.4                    0.08           30.79                5.70                 5.49                          0.0                   0.31                     0.06                0.0            0.0                   0.21\n",
       "min     131.00                11.00           0.00                    0.00                0.00         0.00                          0.00                     0.00                    10.00                1.00                 1.0                         1.00                       1.00                       0.00                      0.00           0.00       4.00              0.00             0.00            0.00                 0.00              33.00                0.00                  5.00                 0.00                9.00                     0.00               0.0                    0.00            0.00                    0.00                           0.0                         0.00                 0.00                 0.0                    0.00            0.00                1.94                 0.63                          1.0                   0.00                     0.00                0.0            1.0                   0.00\n",
       "25%    1350.00                39.00           1.00                    0.00                0.00         1.00                         10.00                     0.00                    72.00                2.00                 3.0                         5.00                       3.00                       0.00                      0.00           1.00       5.00              0.00             1.00            0.00                 0.00             114.00                3.00                 12.00                 0.00               22.00                     1.00               0.0                    0.00            0.00                    0.00                           0.0                         0.00                 0.00                 0.0                    0.00            0.00                7.88                 2.76                          1.0                   0.00                     1.00                0.0            1.0                   0.00\n",
       "50%    1740.00                60.00           1.00                    1.00                1.00         7.00                         30.00                     1.00                    94.00                3.00                 5.0                         7.00                       5.00                       1.00                      0.00           1.00       6.00              0.00             2.00            0.00                 0.00             145.00                4.00                 13.00                 0.00               33.00                     1.00               0.0                    0.00            0.00                    0.00                           0.0                         0.00                 1.00                 0.0                    0.00           20.00               10.86                 4.53                          1.0                   0.00                     1.00                0.0            1.0                   0.00\n",
       "75%    2670.00                95.00           1.00                    1.00                1.00        13.00                         60.00                     1.00                   117.00                3.00                 7.0                         8.00                       8.00                       2.00                      0.00           2.00       6.00              3.00             4.00            1.00                 0.00             173.00                5.00                 15.00               174.00               45.00                     1.00               0.0                    0.00            0.00                    0.00                           0.0                         0.00                 1.00                 0.0                    0.00           60.00               14.07                 7.60                          1.0                   0.00                     1.00                0.0            1.0                   0.00\n",
       "max    8793.00               493.00           1.00                    1.00                1.00        52.00                         90.00                     3.00                  1645.00                5.00                19.0                        18.00                      10.00                      13.00                      3.00           3.00       7.00              9.00            19.00            1.00                 1.00             564.00               11.00                 19.00              1600.00              153.00                     1.00               0.0                    1.00            1.00                    1.00                           1.0                         1.00                 1.00                 1.0                    1.00           90.00               55.60                51.50                          1.0                   1.00                     1.00                0.0            1.0                   1.00"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# email domain types\n",
    "professional_email_domains = ['@mmm.com','@amex.com','@apple.com','@boeing.com','@caterpillar.com','@chevron.com',\n",
    "                              '@cisco.com','@cocacola.com','@disney.com','@dupont.com','@exxon.com','@ge.org',\n",
    "                              '@goldmansacs.com','@homedepot.com','@ibm.com','@intel.com','@jnj.com','@jpmorgan.com',\n",
    "                              '@mcdonalds.com','@merck.com','@microsoft.com','@nike.com','@pfizer.com','@pg.com',\n",
    "                              '@travelers.com','@unitedtech.com','@unitedhealth.com','@verizon.com','@visa.com',\n",
    "                              '@walmart.com']\n",
    "\n",
    "personal_email_domains     = ['@gmail.com', '@yahoo.com', '@protonmail.com']\n",
    "\n",
    "junk_email_domains         = ['@me.com','@aol.com','@hotmail.com','@live.com','@msn.com','@passport.com']\n",
    "\n",
    "\n",
    "# placeholder list\n",
    "email_lst = []\n",
    "\n",
    "# looping to group observations by domain type\n",
    "for domain in chef_df['email_domain']:\n",
    "        if '@'+ domain in professional_email_domains:\n",
    "            email_lst.append('professional')\n",
    "            \n",
    "        elif '@' + domain in personal_email_domains:\n",
    "            email_lst.append('personal')\n",
    "\n",
    "        elif '@' + domain in junk_email_domains:\n",
    "            email_lst.append('junk')\n",
    "            \n",
    "        else:\n",
    "            print('Unknown')\n",
    "\n",
    "        \n",
    "# concatenating with original DataFrame\n",
    "chef_df['domain_group'] = pd.Series(email_lst)\n",
    "\n",
    "\n",
    "# checking results\n",
    "chef_df['domain_group'].value_counts()\n",
    "\n",
    "chef_df.describe().round(2)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating one hot variable in order to convert categorical variable into a form that could help me to do a better job in prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REVENUE</th>\n",
       "      <th>TOTAL_MEALS_ORDERED</th>\n",
       "      <th>EMAIL</th>\n",
       "      <th>MOBILE_NUMBER</th>\n",
       "      <th>TASTES_AND_PREFERENCES</th>\n",
       "      <th>CROSS_SELL_SUCCESS</th>\n",
       "      <th>FIRST_NAME</th>\n",
       "      <th>WEEKLY_PLAN</th>\n",
       "      <th>FOLLOWED_RECOMMENDATIONS_PCT</th>\n",
       "      <th>MASTER_CLASSES_ATTENDED</th>\n",
       "      <th>AVG_TIME_PER_SITE_VISIT</th>\n",
       "      <th>MEDIAN_MEAL_RATING</th>\n",
       "      <th>UNIQUE_MEALS_PURCH</th>\n",
       "      <th>CONTACTS_W_CUSTOMER_SERVICE</th>\n",
       "      <th>PRODUCT_CATEGORIES_VIEWED</th>\n",
       "      <th>CANCELLATIONS_BEFORE_NOON</th>\n",
       "      <th>CANCELLATIONS_AFTER_NOON</th>\n",
       "      <th>MOBILE_LOGINS</th>\n",
       "      <th>PC_LOGINS</th>\n",
       "      <th>EARLY_DELIVERIES</th>\n",
       "      <th>LATE_DELIVERIES</th>\n",
       "      <th>PACKAGE_LOCKER</th>\n",
       "      <th>REFRIGERATED_LOCKER</th>\n",
       "      <th>AVG_PREP_VID_TIME</th>\n",
       "      <th>LARGEST_ORDER_SIZE</th>\n",
       "      <th>AVG_CLICKS_PER_VISIT</th>\n",
       "      <th>TOTAL_PHOTOS_VIEWED</th>\n",
       "      <th>avg_spent_per_meal</th>\n",
       "      <th>total_meals_ordered_out</th>\n",
       "      <th>MOBILE_NUMBER_at</th>\n",
       "      <th>unique_meals_purch_out</th>\n",
       "      <th>contact_cs_out</th>\n",
       "      <th>avg_time_per_visit_out</th>\n",
       "      <th>cancellation_before_noon_out</th>\n",
       "      <th>cancellation_after_noon_out</th>\n",
       "      <th>weekly_plan_out_low</th>\n",
       "      <th>weekly_plan_out_hi</th>\n",
       "      <th>median_meal_rating_out</th>\n",
       "      <th>cross_followed</th>\n",
       "      <th>avg_vid_time_click</th>\n",
       "      <th>meals_ordered_click</th>\n",
       "      <th>total_meals_ordered_low_out</th>\n",
       "      <th>CONTACT_C_SERVICE_OUT</th>\n",
       "      <th>AVG_CLICK_PER_VISIT_OUT</th>\n",
       "      <th>MOBILE_LOGINS_bin</th>\n",
       "      <th>PC_LOGINS_bin</th>\n",
       "      <th>avg_spent_per_meal_hi</th>\n",
       "      <th>email_domain</th>\n",
       "      <th>junk</th>\n",
       "      <th>personal</th>\n",
       "      <th>professional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1880</td>\n",
       "      <td>118</td>\n",
       "      <td>addam.osgrey@passport.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Addam</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>165</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>10.727273</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>passport.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1495</td>\n",
       "      <td>44</td>\n",
       "      <td>aegon.blackfyre@jnj.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>90</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>11.538462</td>\n",
       "      <td>3.384615</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>jnj.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2572</td>\n",
       "      <td>38</td>\n",
       "      <td>aegon.frey.(son.of.aenys)@gmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>14</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>80</td>\n",
       "      <td>8.250000</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1647</td>\n",
       "      <td>76</td>\n",
       "      <td>aegon.targaryen.(son.of.rhaegar)@ibm.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>11</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>9.615385</td>\n",
       "      <td>5.846154</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ibm.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1923</td>\n",
       "      <td>65</td>\n",
       "      <td>aegon.v.targaryen@goldmansacs.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>12</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>135</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>253</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>10.384615</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>goldmansacs.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1941</th>\n",
       "      <td>1515</td>\n",
       "      <td>38</td>\n",
       "      <td>yandry@yahoo.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yandry</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>117</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>98</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.750000</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>yahoo.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1942</th>\n",
       "      <td>1432</td>\n",
       "      <td>47</td>\n",
       "      <td>yorkel@gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yorkel</td>\n",
       "      <td>6</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>105</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>98</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.538462</td>\n",
       "      <td>3.615385</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1943</th>\n",
       "      <td>623</td>\n",
       "      <td>14</td>\n",
       "      <td>young.henly@gmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Young</td>\n",
       "      <td>12</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>90</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.777778</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1944</th>\n",
       "      <td>899</td>\n",
       "      <td>15</td>\n",
       "      <td>ysilla@protonmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ysilla</td>\n",
       "      <td>52</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.058824</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>protonmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1945</th>\n",
       "      <td>1255</td>\n",
       "      <td>29</td>\n",
       "      <td>ysilla.royce@hotmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Ysilla</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>182</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>5</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.214286</td>\n",
       "      <td>2.071429</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>hotmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1946 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      REVENUE  TOTAL_MEALS_ORDERED                                     EMAIL  MOBILE_NUMBER  TASTES_AND_PREFERENCES  CROSS_SELL_SUCCESS FIRST_NAME  WEEKLY_PLAN  FOLLOWED_RECOMMENDATIONS_PCT  MASTER_CLASSES_ATTENDED  AVG_TIME_PER_SITE_VISIT  MEDIAN_MEAL_RATING  UNIQUE_MEALS_PURCH  CONTACTS_W_CUSTOMER_SERVICE  PRODUCT_CATEGORIES_VIEWED  CANCELLATIONS_BEFORE_NOON  CANCELLATIONS_AFTER_NOON  MOBILE_LOGINS  PC_LOGINS  EARLY_DELIVERIES  LATE_DELIVERIES  PACKAGE_LOCKER  REFRIGERATED_LOCKER  AVG_PREP_VID_TIME  LARGEST_ORDER_SIZE  AVG_CLICKS_PER_VISIT  TOTAL_PHOTOS_VIEWED  avg_spent_per_meal  total_meals_ordered_out  MOBILE_NUMBER_at  unique_meals_purch_out  contact_cs_out  avg_time_per_visit_out  cancellation_before_noon_out  cancellation_after_noon_out  weekly_plan_out_low  weekly_plan_out_hi  median_meal_rating_out  cross_followed  avg_vid_time_click  meals_ordered_click  total_meals_ordered_low_out  CONTACT_C_SERVICE_OUT  AVG_CLICK_PER_VISIT_OUT  MOBILE_LOGINS_bin  PC_LOGINS_bin  \\\n",
       "0        1880                  118                 addam.osgrey@passport.com              1                       0                   1      Addam            8                            90                        1                       86                   3                   4                            7                          5                          2                         1              2          6                 0                2               1                    0                165                   6                    11                    0                  15                        1                 0                       0               0                       0                             0                            1                    1                   0                       0              90           15.000000            10.727273                            1                      0                        1                  0              1   \n",
       "1        1495                   44                   aegon.blackfyre@jnj.com              1                       0                   1      Aegon            8                            90                        1                      125                   3                   3                            6                          3                          0                         1              1          6                 0                4               1                    0                150                   4                    13                   90                  33                        1                 0                       0               0                       0                             0                            1                    1                   0                       0              90           11.538462             3.384615                            1                      0                        1                  0              1   \n",
       "2        2572                   38       aegon.frey.(son.of.aenys)@gmail.com              1                       1                   1      Aegon           14                            80                        0                       58                   3                   1                            5                          3                          5                         0              2          6                 0                0               0                    0                 99                   3                    12                    0                  67                        1                 0                       0               0                       0                             1                            0                    1                   0                       0              80            8.250000             3.166667                            1                      0                        1                  0              1   \n",
       "3        1647                   76  aegon.targaryen.(son.of.rhaegar)@ibm.com              0                       1                   1      Aegon           11                            90                        0                       45                   3                   3                            8                         10                          3                         0              1          6                 5                4               0                    0                125                   3                    13                    0                  21                        1                 0                       0               0                       0                             0                            0                    1                   0                       0              90            9.615385             5.846154                            1                      0                        1                  0              1   \n",
       "4        1923                   65         aegon.v.targaryen@goldmansacs.com              1                       0                   1      Aegon           12                            90                        1                      106                   3                   3                            6                          9                          1                         1              2          6                 0                4               1                    0                135                   3                    13                  253                  29                        1                 0                       0               0                       0                             0                            1                    1                   0                       0              90           10.384615             5.000000                            1                      0                        1                  0              1   \n",
n",
       "1941     1515                   38                          yandry@yahoo.com              1                       1                   0     Yandry            9                            20                        0                      118                   3                   9                            6                          9                          1                         0              2          6                 4                3               0                    0                117                   4                    12                   98                  39                        1                 0                       0               0                       0                             0                            0                    1                   0                       0               0            9.750000             3.166667                            1                      0                        1                  0              1   \n",
       "1942     1432                   47                          yorkel@gmail.com              0                       1                   0     Yorkel            6                            20                        0                      105                   3                   8                            4                          8                          0                         0              3          5                 0                2               0                    0                 98                   3                    13                    0                  30                        1                 0                       0               0                       0                             0                            0                    1                   0                       0               0            7.538462             3.615385                            1                      0                        1                  0              1   \n",
       "1943      623                   14                     young.henly@gmail.com              1                       1                   0      Young           12                            30                        1                       90                   2                   6                           11                          1                          1                         0              1          6                 0                1               0                    0                 86                   3                    18                    0                  44                        0                 0                       0               1                       0                             0                            0                    1                   0                       0               0            4.777778             0.777778                            1                      1                        1                  0              1   \n",
       "1944      899                   15                     ysilla@protonmail.com              1                       0                   0     Ysilla           52                            20                        0                       97                   2                   4                           12                          6                          0                         0              2          6                 4                3               0                    0                 86                   1                    17                    0                  59                        0                 0                       0               1                       0                             0                            0                    1                   1                       0               0            5.058824             0.882353                            1                      1                        1                  0              1   \n",
       "1945     1255                   29                  ysilla.royce@hotmail.com              1                       1                   0     Ysilla            0                            10                        0                      182                   2                   2                            4                          2                          0                         0              2          7                 0                4               0                    0                115                   5                    14                    0                  43                        1                 0                       0               0                       0                             0                            0                    0                   0                       0               0            8.214286             2.071429                            1                      0                        1                  0              1   \n",
       "\n",
       "      avg_spent_per_meal_hi     email_domain  junk  personal  professional  \n",
       "0                         0     passport.com     1         0             0  \n",
       "1                         0          jnj.com     0         0             1  \n",
       "2                         0        gmail.com     0         1             0  \n",
       "3                         0          ibm.com     0         0             1  \n",
       "4                         0  goldmansacs.com     0         0             1  \n",
       "...                     ...              ...   ...       ...           ...  \n",
       "1941                      0        yahoo.com     0         1             0  \n",
       "1942                      0        gmail.com     0         1             0  \n",
       "1943                      0        gmail.com     0         1             0  \n",
       "1944                      0   protonmail.com     0         1             0  \n",
       "1945                      0      hotmail.com     1         0             0  \n",
       "\n",
       "[1946 rows x 51 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# one hot encoding categorical variables\n",
    "one_email_domain       = pd.get_dummies(chef_df['domain_group'])\n",
    "\n",
    "# dropping categorical variables after they've been encoded\n",
    "chef_df1 = chef_df.drop('domain_group', axis = 1)\n",
    "\n",
    "# joining codings together\n",
    "\n",
    "chef_df1 = chef_df1.join([one_email_domain])\n",
    "\n",
    "chef_df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REVENUE</th>\n",
       "      <th>TOTAL_MEALS_ORDERED</th>\n",
       "      <th>EMAIL</th>\n",
       "      <th>MOBILE_NUMBER</th>\n",
       "      <th>TASTES_AND_PREFERENCES</th>\n",
       "      <th>CROSS_SELL_SUCCESS</th>\n",
       "      <th>FIRST_NAME</th>\n",
       "      <th>WEEKLY_PLAN</th>\n",
       "      <th>FOLLOWED_RECOMMENDATIONS_PCT</th>\n",
       "      <th>MASTER_CLASSES_ATTENDED</th>\n",
       "      <th>AVG_TIME_PER_SITE_VISIT</th>\n",
       "      <th>MEDIAN_MEAL_RATING</th>\n",
       "      <th>UNIQUE_MEALS_PURCH</th>\n",
       "      <th>CONTACTS_W_CUSTOMER_SERVICE</th>\n",
       "      <th>PRODUCT_CATEGORIES_VIEWED</th>\n",
       "      <th>CANCELLATIONS_BEFORE_NOON</th>\n",
       "      <th>CANCELLATIONS_AFTER_NOON</th>\n",
       "      <th>MOBILE_LOGINS</th>\n",
       "      <th>PC_LOGINS</th>\n",
       "      <th>EARLY_DELIVERIES</th>\n",
       "      <th>LATE_DELIVERIES</th>\n",
       "      <th>PACKAGE_LOCKER</th>\n",
       "      <th>REFRIGERATED_LOCKER</th>\n",
       "      <th>AVG_PREP_VID_TIME</th>\n",
       "      <th>LARGEST_ORDER_SIZE</th>\n",
       "      <th>AVG_CLICKS_PER_VISIT</th>\n",
       "      <th>TOTAL_PHOTOS_VIEWED</th>\n",
       "      <th>avg_spent_per_meal</th>\n",
       "      <th>total_meals_ordered_out</th>\n",
       "      <th>MOBILE_NUMBER_at</th>\n",
       "      <th>unique_meals_purch_out</th>\n",
       "      <th>contact_cs_out</th>\n",
       "      <th>avg_time_per_visit_out</th>\n",
       "      <th>cancellation_before_noon_out</th>\n",
       "      <th>cancellation_after_noon_out</th>\n",
       "      <th>weekly_plan_out_low</th>\n",
       "      <th>weekly_plan_out_hi</th>\n",
       "      <th>median_meal_rating_out</th>\n",
       "      <th>cross_followed</th>\n",
       "      <th>avg_vid_time_click</th>\n",
       "      <th>meals_ordered_click</th>\n",
       "      <th>total_meals_ordered_low_out</th>\n",
       "      <th>CONTACT_C_SERVICE_OUT</th>\n",
       "      <th>AVG_CLICK_PER_VISIT_OUT</th>\n",
       "      <th>MOBILE_LOGINS_bin</th>\n",
       "      <th>PC_LOGINS_bin</th>\n",
       "      <th>avg_spent_per_meal_hi</th>\n",
       "      <th>email_domain</th>\n",
       "      <th>junk</th>\n",
       "      <th>personal</th>\n",
       "      <th>professional</th>\n",
       "      <th>LogRevenue</th>\n",
       "      <th>photos_per_min</th>\n",
       "      <th>clicks_per_min</th>\n",
       "      <th>photos_per_min_hi</th>\n",
       "      <th>photos_per_min_out</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1880</td>\n",
       "      <td>118</td>\n",
       "      <td>addam.osgrey@passport.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Addam</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>165</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>10.727273</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>passport.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.539027</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.674419</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1495</td>\n",
       "      <td>44</td>\n",
       "      <td>aegon.blackfyre@jnj.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>90</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>11.538462</td>\n",
       "      <td>3.384615</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>jnj.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.309881</td>\n",
       "      <td>43.200000</td>\n",
       "      <td>6.240000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2572</td>\n",
       "      <td>38</td>\n",
       "      <td>aegon.frey.(son.of.aenys)@gmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>14</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>80</td>\n",
       "      <td>8.250000</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.852439</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.413793</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1647</td>\n",
       "      <td>76</td>\n",
       "      <td>aegon.targaryen.(son.of.rhaegar)@ibm.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>11</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>9.615385</td>\n",
       "      <td>5.846154</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ibm.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.406711</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>17.333333</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1923</td>\n",
       "      <td>65</td>\n",
       "      <td>aegon.v.targaryen@goldmansacs.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>12</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>135</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>253</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>90</td>\n",
       "      <td>10.384615</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>goldmansacs.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.561642</td>\n",
       "      <td>143.207547</td>\n",
       "      <td>7.358491</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1941</th>\n",
       "      <td>1515</td>\n",
       "      <td>38</td>\n",
       "      <td>yandry@yahoo.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yandry</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>117</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>98</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.750000</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>yahoo.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.323171</td>\n",
       "      <td>49.830508</td>\n",
       "      <td>6.101695</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1942</th>\n",
       "      <td>1432</td>\n",
       "      <td>47</td>\n",
       "      <td>yorkel@gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yorkel</td>\n",
       "      <td>6</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>105</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>98</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.538462</td>\n",
       "      <td>3.615385</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.266827</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.428571</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1943</th>\n",
       "      <td>623</td>\n",
       "      <td>14</td>\n",
       "      <td>young.henly@gmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Young</td>\n",
       "      <td>12</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>90</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.777778</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6.434547</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1944</th>\n",
       "      <td>899</td>\n",
       "      <td>15</td>\n",
       "      <td>ysilla@protonmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ysilla</td>\n",
       "      <td>52</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.058824</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>protonmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6.801283</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.515464</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1945</th>\n",
       "      <td>1255</td>\n",
       "      <td>29</td>\n",
       "      <td>ysilla.royce@hotmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Ysilla</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>182</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>5</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.214286</td>\n",
       "      <td>2.071429</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>hotmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.134891</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.615385</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1946 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      REVENUE  TOTAL_MEALS_ORDERED                                     EMAIL  MOBILE_NUMBER  TASTES_AND_PREFERENCES  CROSS_SELL_SUCCESS FIRST_NAME  WEEKLY_PLAN  FOLLOWED_RECOMMENDATIONS_PCT  MASTER_CLASSES_ATTENDED  AVG_TIME_PER_SITE_VISIT  MEDIAN_MEAL_RATING  UNIQUE_MEALS_PURCH  CONTACTS_W_CUSTOMER_SERVICE  PRODUCT_CATEGORIES_VIEWED  CANCELLATIONS_BEFORE_NOON  CANCELLATIONS_AFTER_NOON  MOBILE_LOGINS  PC_LOGINS  EARLY_DELIVERIES  LATE_DELIVERIES  PACKAGE_LOCKER  REFRIGERATED_LOCKER  AVG_PREP_VID_TIME  LARGEST_ORDER_SIZE  AVG_CLICKS_PER_VISIT  TOTAL_PHOTOS_VIEWED  avg_spent_per_meal  total_meals_ordered_out  MOBILE_NUMBER_at  unique_meals_purch_out  contact_cs_out  avg_time_per_visit_out  cancellation_before_noon_out  cancellation_after_noon_out  weekly_plan_out_low  weekly_plan_out_hi  median_meal_rating_out  cross_followed  avg_vid_time_click  meals_ordered_click  total_meals_ordered_low_out  CONTACT_C_SERVICE_OUT  AVG_CLICK_PER_VISIT_OUT  MOBILE_LOGINS_bin  PC_LOGINS_bin  \\\n",
       "0        1880                  118                 addam.osgrey@passport.com              1                       0                   1      Addam            8                            90                        1                       86                   3                   4                            7                          5                          2                         1              2          6                 0                2               1                    0                165                   6                    11                    0                  15                        1                 0                       0               0                       0                             0                            1                    1                   0                       0              90           15.000000            10.727273                            1                      0                        1                  0              1   \n",
       "1        1495                   44                   aegon.blackfyre@jnj.com              1                       0                   1      Aegon            8                            90                        1                      125                   3                   3                            6                          3                          0                         1              1          6                 0                4               1                    0                150                   4                    13                   90                  33                        1                 0                       0               0                       0                             0                            1                    1                   0                       0              90           11.538462             3.384615                            1                      0                        1                  0              1   \n",
       "2        2572                   38       aegon.frey.(son.of.aenys)@gmail.com              1                       1                   1      Aegon           14                            80                        0                       58                   3                   1                            5                          3                          5                         0              2          6                 0                0               0                    0                 99                   3                    12                    0                  67                        1                 0                       0               0                       0                             1                            0                    1                   0                       0              80            8.250000             3.166667                            1                      0                        1                  0              1   \n",
       "3        1647                   76  aegon.targaryen.(son.of.rhaegar)@ibm.com              0                       1                   1      Aegon           11                            90                        0                       45                   3                   3                            8                         10                          3                         0              1          6                 5                4               0                    0                125                   3                    13                    0                  21                        1                 0                       0               0                       0                             0                            0                    1                   0                       0              90            9.615385             5.846154                            1                      0                        1                  0              1   \n",
       "4        1923                   65         aegon.v.targaryen@goldmansacs.com              1                       0                   1      Aegon           12                            90                        1                      106                   3                   3                            6                          9                          1                         1              2          6                 0                4               1                    0                135                   3                    13                  253                  29                        1                 0                       0               0                       0                             0                            1                    1                   0                       0              90           10.384615             5.000000                            1                      0                        1                  0              1   \n",
n",
       "1941     1515                   38                          yandry@yahoo.com              1                       1                   0     Yandry            9                            20                        0                      118                   3                   9                            6                          9                          1                         0              2          6                 4                3               0                    0                117                   4                    12                   98                  39                        1                 0                       0               0                       0                             0                            0                    1                   0                       0               0            9.750000             3.166667                            1                      0                        1                  0              1   \n",
       "1942     1432                   47                          yorkel@gmail.com              0                       1                   0     Yorkel            6                            20                        0                      105                   3                   8                            4                          8                          0                         0              3          5                 0                2               0                    0                 98                   3                    13                    0                  30                        1                 0                       0               0                       0                             0                            0                    1                   0                       0               0            7.538462             3.615385                            1                      0                        1                  0              1   \n",
       "1943      623                   14                     young.henly@gmail.com              1                       1                   0      Young           12                            30                        1                       90                   2                   6                           11                          1                          1                         0              1          6                 0                1               0                    0                 86                   3                    18                    0                  44                        0                 0                       0               1                       0                             0                            0                    1                   0                       0               0            4.777778             0.777778                            1                      1                        1                  0              1   \n",
       "1944      899                   15                     ysilla@protonmail.com              1                       0                   0     Ysilla           52                            20                        0                       97                   2                   4                           12                          6                          0                         0              2          6                 4                3               0                    0                 86                   1                    17                    0                  59                        0                 0                       0               1                       0                             0                            0                    1                   1                       0               0            5.058824             0.882353                            1                      1                        1                  0              1   \n",
       "1945     1255                   29                  ysilla.royce@hotmail.com              1                       1                   0     Ysilla            0                            10                        0                      182                   2                   2                            4                          2                          0                         0              2          7                 0                4               0                    0                115                   5                    14                    0                  43                        1                 0                       0               0                       0                             0                            0                    0                   0                       0               0            8.214286             2.071429                            1                      0                        1                  0              1   \n",
       "\n",
       "      avg_spent_per_meal_hi     email_domain  junk  personal  professional  LogRevenue  photos_per_min  clicks_per_min  photos_per_min_hi  photos_per_min_out  \n",
       "0                         0     passport.com     1         0             0    7.539027        0.000000        7.674419                  0                   1  \n",
       "1                         0          jnj.com     0         0             1    7.309881       43.200000        6.240000                  0                   0  \n",
       "2                         0        gmail.com     0         1             0    7.852439        0.000000       12.413793                  0                   1  \n",
       "3                         0          ibm.com     0         0             1    7.406711        0.000000       17.333333                  0                   1  \n",
       "4                         0  goldmansacs.com     0         0             1    7.561642      143.207547        7.358491                  0                   0  \n",
       "...                     ...              ...   ...       ...           ...         ...             ...             ...                ...                 ...  \n",
       "1941                      0        yahoo.com     0         1             0    7.323171       49.830508        6.101695                  0                   0  \n",
       "1942                      0        gmail.com     0         1             0    7.266827        0.000000        7.428571                  0                   1  \n",
       "1943                      0        gmail.com     0         1             0    6.434547        0.000000       12.000000                  0                   1  \n",
       "1944                      0   protonmail.com     0         1             0    6.801283        0.000000       10.515464                  0                   1  \n",
       "1945                      0      hotmail.com     1         0             0    7.134891        0.000000        4.615385                  0                   1  \n",
       "\n",
       "[1946 rows x 56 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1008 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Creating new columns/variables\n",
    "\n",
    "#Log of REVENUE\n",
    "chef_df1['LogRevenue'] = np.log(chef_df1['REVENUE'])\n",
    "\n",
    "#Photos per unit time\n",
    "chef_df1['photos_per_min'] = 60*chef_df1['TOTAL_PHOTOS_VIEWED']/chef_df1['AVG_TIME_PER_SITE_VISIT']\n",
    "\n",
    "#Clicks per unit time\n",
    "chef_df1['clicks_per_min'] = 60*chef_df1['AVG_CLICKS_PER_VISIT']/chef_df1['AVG_TIME_PER_SITE_VISIT']\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15, 14))\n",
    "#Average clicks per visit\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.distplot(chef_df1['photos_per_min'],\n",
    "             bins  = 'fd',             color = 'y')\n",
    "plt.xlabel('photos_per_min')\n",
    "\n",
    "plt.subplot(2, 2, 2)\n",
    "sns.distplot(chef_df1['clicks_per_min'],\n",
    "             bins  = 'fd',\n",
    "             color = 'b')\n",
    "plt.xlabel('clicks_per_min')\n",
    "\n",
    "#outliers new variables - flags\n",
    "photos_per_min_hi = 350 #\n",
    "photos_per_min_out = 0 #inflated in 0\n",
    "clicks_per_min = 17\n",
    "\n",
    "#Photos per unit time - hi\n",
    "chef_df1['photos_per_min_hi'] = 0\n",
    "condition_1 = chef_df1.loc[0:,'photos_per_min_hi'][chef_df1['photos_per_min'] > photos_per_min_hi]\n",
    "\n",
    "chef_df1['photos_per_min_hi'].replace(to_replace = condition_1,\n",
    "                                value      = 1,\n",
    "                                inplace    = True)\n",
    "\n",
    "#Photos per unit time - out\n",
    "chef_df1['photos_per_min_out'] = 0\n",
    "condition_1 = chef_df1.loc[0:,'photos_per_min_out'][chef_df1['photos_per_min'] == photos_per_min_out]\n",
    "\n",
    "chef_df1['photos_per_min_out'].replace(to_replace = condition_1,\n",
    "                                value      = 1,\n",
    "                                inplace    = True)\n",
    "\n",
    "\n",
    "chef_df1['photos_per_min'] = 60*chef_df1['TOTAL_PHOTOS_VIEWED']/chef_df1['AVG_TIME_PER_SITE_VISIT']\n",
    "\n",
    "#Clicks per unit time\n",
    "chef_df1['clicks_per_min'] = 60*chef_df1['AVG_CLICKS_PER_VISIT']/chef_df1['AVG_TIME_PER_SITE_VISIT']\n",
    "\n",
    "chef_df1\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "chef_df1.to_excel(\"chef_with_all_flags.xlsx\",\n",
    "                 index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Step Building Models "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I'm Implementing Correlation Matrix in order to detect even furtherly which are the most important variables or the variables that make more sense and we can mark them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CROSS_SELL_SUCCESS              1.00\n",
      "cross_followed                  0.67\n",
      "FOLLOWED_RECOMMENDATIONS_PCT    0.46\n",
      "professional                    0.19\n",
      "CANCELLATIONS_BEFORE_NOON       0.16\n",
      "MOBILE_NUMBER                   0.10\n",
      "cancellation_before_noon_out    0.08\n",
      "TASTES_AND_PREFERENCES          0.08\n",
      "REFRIGERATED_LOCKER             0.07\n",
      "PC_LOGINS                       0.04\n",
      "personal                        0.04\n",
      "MASTER_CLASSES_ATTENDED         0.04\n",
      "avg_vid_time_click              0.04\n",
      "PACKAGE_LOCKER                  0.04\n",
      "CONTACTS_W_CUSTOMER_SERVICE     0.04\n",
      "AVG_PREP_VID_TIME               0.03\n",
      "median_meal_rating_out          0.03\n",
      "MEDIAN_MEAL_RATING              0.03\n",
      "EARLY_DELIVERIES                0.02\n",
      "LARGEST_ORDER_SIZE              0.02\n",
      "AVG_TIME_PER_SITE_VISIT         0.01\n",
      "meals_ordered_click             0.01\n",
      "total_meals_ordered_out         0.01\n",
      "LogRevenue                      0.01\n",
      "LATE_DELIVERIES                 0.01\n",
      "TOTAL_MEALS_ORDERED             0.01\n",
      "TOTAL_PHOTOS_VIEWED             0.01\n",
      "UNIQUE_MEALS_PURCH              0.00\n",
      "PRODUCT_CATEGORIES_VIEWED       0.00\n",
      "REVENUE                         0.00\n",
      "weekly_plan_out_hi              0.00\n",
      "photos_per_min                  0.00\n",
      "AVG_CLICK_PER_VISIT_OUT         0.00\n",
      "weekly_plan_out_low            -0.01\n",
      "avg_spent_per_meal_hi          -0.01\n",
      "WEEKLY_PLAN                    -0.01\n",
      "CONTACT_C_SERVICE_OUT          -0.01\n",
      "photos_per_min_out             -0.01\n",
      "avg_time_per_visit_out         -0.01\n",
      "contact_cs_out                 -0.01\n",
      "photos_per_min_hi              -0.02\n",
      "avg_spent_per_meal             -0.02\n",
      "clicks_per_min                 -0.02\n",
      "unique_meals_purch_out         -0.03\n",
      "AVG_CLICKS_PER_VISIT           -0.04\n",
      "cancellation_after_noon_out    -0.05\n",
      "CANCELLATIONS_AFTER_NOON       -0.05\n",
      "MOBILE_LOGINS                  -0.05\n",
      "junk                           -0.28\n",
      "MOBILE_NUMBER_at                 NaN\n",
      "total_meals_ordered_low_out      NaN\n",
      "MOBILE_LOGINS_bin                NaN\n",
      "PC_LOGINS_bin                    NaN\n",
      "Name: CROSS_SELL_SUCCESS, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# creating a (Pearson) correlation matrix\n",
    "chef_corr = chef_df1.corr().round(2)\n",
    "\n",
    "# printing (Pearson) correlations with Revenue\n",
    "print(chef_corr.loc['CROSS_SELL_SUCCESS'].sort_values(ascending = False))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "converting some variables into integers from float to prevent errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#chef_work1['CROSS_SELL_SUCCESS'] = [math.floor(i) for i in chef_work1['CROSS_SELL_SUCCESS']]\n",
    "chef_df1['LogRevenue'] = [math.floor(i) for i in chef_df1['LogRevenue']]\n",
    "chef_df1['photos_per_min'] = [math.floor(i) for i in chef_df1['photos_per_min']]\n",
    "chef_df1['clicks_per_min'] = [math.floor(i) for i in chef_df1['clicks_per_min']]\n",
    "\n",
    "\n",
    "\n",
    "#chef_df1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I dropped email_domain\n",
    "#chef_df1 = chef_df1.drop('domain_group', axis = 1)\n",
    "\n",
    "#chef_df1.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REVENUE</th>\n",
       "      <th>TOTAL_MEALS_ORDERED</th>\n",
       "      <th>EMAIL</th>\n",
       "      <th>MOBILE_NUMBER</th>\n",
       "      <th>TASTES_AND_PREFERENCES</th>\n",
       "      <th>CROSS_SELL_SUCCESS</th>\n",
       "      <th>FIRST_NAME</th>\n",
       "      <th>WEEKLY_PLAN</th>\n",
       "      <th>FOLLOWED_RECOMMENDATIONS_PCT</th>\n",
       "      <th>MASTER_CLASSES_ATTENDED</th>\n",
       "      <th>AVG_TIME_PER_SITE_VISIT</th>\n",
       "      <th>MEDIAN_MEAL_RATING</th>\n",
       "      <th>UNIQUE_MEALS_PURCH</th>\n",
       "      <th>CONTACTS_W_CUSTOMER_SERVICE</th>\n",
       "      <th>PRODUCT_CATEGORIES_VIEWED</th>\n",
       "      <th>CANCELLATIONS_BEFORE_NOON</th>\n",
       "      <th>CANCELLATIONS_AFTER_NOON</th>\n",
       "      <th>MOBILE_LOGINS</th>\n",
       "      <th>PC_LOGINS</th>\n",
       "      <th>EARLY_DELIVERIES</th>\n",
       "      <th>LATE_DELIVERIES</th>\n",
       "      <th>PACKAGE_LOCKER</th>\n",
       "      <th>REFRIGERATED_LOCKER</th>\n",
       "      <th>AVG_PREP_VID_TIME</th>\n",
       "      <th>LARGEST_ORDER_SIZE</th>\n",
       "      <th>AVG_CLICKS_PER_VISIT</th>\n",
       "      <th>TOTAL_PHOTOS_VIEWED</th>\n",
       "      <th>avg_spent_per_meal</th>\n",
       "      <th>total_meals_ordered_out</th>\n",
       "      <th>MOBILE_NUMBER_at</th>\n",
       "      <th>unique_meals_purch_out</th>\n",
       "      <th>contact_cs_out</th>\n",
       "      <th>avg_time_per_visit_out</th>\n",
       "      <th>cancellation_before_noon_out</th>\n",
       "      <th>cancellation_after_noon_out</th>\n",
       "      <th>weekly_plan_out_low</th>\n",
       "      <th>weekly_plan_out_hi</th>\n",
       "      <th>early_deliveries_out</th>\n",
       "      <th>late_deliveries_out</th>\n",
       "      <th>avg_prep_vid_time_out</th>\n",
       "      <th>largest_order_size_out</th>\n",
       "      <th>master_class_attended_out</th>\n",
       "      <th>median_meal_rating_out</th>\n",
       "      <th>photos_viewed_low_out</th>\n",
       "      <th>photos_viewed_hi_out</th>\n",
       "      <th>rating_click</th>\n",
       "      <th>avg_vid_time_larg_order</th>\n",
       "      <th>avg_vid_time_meals_order</th>\n",
       "      <th>avg_vid_time_master_class</th>\n",
       "      <th>avg_vid_time_rating</th>\n",
       "      <th>meals_ordered_rating</th>\n",
       "      <th>cross_followed</th>\n",
       "      <th>avg_vid_time_click</th>\n",
       "      <th>meals_ordered_click</th>\n",
       "      <th>median_meal_rating_out_2</th>\n",
       "      <th>total_meals_ordered_low_out</th>\n",
       "      <th>CONTACT_C_SERVICE_OUT</th>\n",
       "      <th>AVG_CLICK_PER_VISIT_OUT</th>\n",
       "      <th>MOBILE_LOGINS_bin</th>\n",
       "      <th>PC_LOGINS_bin</th>\n",
       "      <th>avg_spent_per_meal_lo</th>\n",
       "      <th>avg_spent_per_meal_mid</th>\n",
       "      <th>avg_spent_per_meal_hi</th>\n",
       "      <th>email_domain</th>\n",
       "      <th>junk</th>\n",
       "      <th>personal</th>\n",
       "      <th>professional</th>\n",
       "      <th>LogRevenue</th>\n",
       "      <th>photos_per_min</th>\n",
       "      <th>clicks_per_min</th>\n",
       "      <th>photos_per_min_hi</th>\n",
       "      <th>photos_per_min_out</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1880</td>\n",
       "      <td>118</td>\n",
       "      <td>addam.osgrey@passport.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Addam</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>165</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>990</td>\n",
       "      <td>19470</td>\n",
       "      <td>165</td>\n",
       "      <td>495</td>\n",
       "      <td>354</td>\n",
       "      <td>90</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>10.727273</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>passport.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1495</td>\n",
       "      <td>44</td>\n",
       "      <td>aegon.blackfyre@jnj.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>90</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>600</td>\n",
       "      <td>6600</td>\n",
       "      <td>150</td>\n",
       "      <td>450</td>\n",
       "      <td>132</td>\n",
       "      <td>90</td>\n",
       "      <td>11.538462</td>\n",
       "      <td>3.384615</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>jnj.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>43</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2572</td>\n",
       "      <td>38</td>\n",
       "      <td>aegon.frey.(son.of.aenys)@gmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>14</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>297</td>\n",
       "      <td>3762</td>\n",
       "      <td>0</td>\n",
       "      <td>297</td>\n",
       "      <td>114</td>\n",
       "      <td>80</td>\n",
       "      <td>8.250000</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1647</td>\n",
       "      <td>76</td>\n",
       "      <td>aegon.targaryen.(son.of.rhaegar)@ibm.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>11</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>375</td>\n",
       "      <td>9500</td>\n",
       "      <td>0</td>\n",
       "      <td>375</td>\n",
       "      <td>228</td>\n",
       "      <td>90</td>\n",
       "      <td>9.615385</td>\n",
       "      <td>5.846154</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>ibm.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1923</td>\n",
       "      <td>65</td>\n",
       "      <td>aegon.v.targaryen@goldmansacs.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Aegon</td>\n",
       "      <td>12</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>135</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>253</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>405</td>\n",
       "      <td>8775</td>\n",
       "      <td>135</td>\n",
       "      <td>405</td>\n",
       "      <td>195</td>\n",
       "      <td>90</td>\n",
       "      <td>10.384615</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>goldmansacs.com</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>143</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1941</th>\n",
       "      <td>1515</td>\n",
       "      <td>38</td>\n",
       "      <td>yandry@yahoo.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yandry</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>117</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>98</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>468</td>\n",
       "      <td>4446</td>\n",
       "      <td>0</td>\n",
       "      <td>351</td>\n",
       "      <td>114</td>\n",
       "      <td>0</td>\n",
       "      <td>9.750000</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>yahoo.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>49</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1942</th>\n",
       "      <td>1432</td>\n",
       "      <td>47</td>\n",
       "      <td>yorkel@gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yorkel</td>\n",
       "      <td>6</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>105</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>98</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>294</td>\n",
       "      <td>4606</td>\n",
       "      <td>0</td>\n",
       "      <td>294</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>7.538462</td>\n",
       "      <td>3.615385</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1943</th>\n",
       "      <td>623</td>\n",
       "      <td>14</td>\n",
       "      <td>young.henly@gmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Young</td>\n",
       "      <td>12</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>90</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>258</td>\n",
       "      <td>1204</td>\n",
       "      <td>86</td>\n",
       "      <td>172</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>4.777778</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>gmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1944</th>\n",
       "      <td>899</td>\n",
       "      <td>15</td>\n",
       "      <td>ysilla@protonmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ysilla</td>\n",
       "      <td>52</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.117647</td>\n",
       "      <td>86</td>\n",
       "      <td>1290</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>5.058824</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>protonmail.com</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1945</th>\n",
       "      <td>1255</td>\n",
       "      <td>29</td>\n",
       "      <td>ysilla.royce@hotmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Ysilla</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>182</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>5</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>575</td>\n",
       "      <td>3335</td>\n",
       "      <td>0</td>\n",
       "      <td>230</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>8.214286</td>\n",
       "      <td>2.071429</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>hotmail.com</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1946 rows × 72 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      REVENUE  TOTAL_MEALS_ORDERED                                     EMAIL  MOBILE_NUMBER  TASTES_AND_PREFERENCES  CROSS_SELL_SUCCESS FIRST_NAME  WEEKLY_PLAN  FOLLOWED_RECOMMENDATIONS_PCT  MASTER_CLASSES_ATTENDED  AVG_TIME_PER_SITE_VISIT  MEDIAN_MEAL_RATING  UNIQUE_MEALS_PURCH  CONTACTS_W_CUSTOMER_SERVICE  PRODUCT_CATEGORIES_VIEWED  CANCELLATIONS_BEFORE_NOON  CANCELLATIONS_AFTER_NOON  MOBILE_LOGINS  PC_LOGINS  EARLY_DELIVERIES  LATE_DELIVERIES  PACKAGE_LOCKER  REFRIGERATED_LOCKER  AVG_PREP_VID_TIME  LARGEST_ORDER_SIZE  AVG_CLICKS_PER_VISIT  TOTAL_PHOTOS_VIEWED  avg_spent_per_meal  total_meals_ordered_out  MOBILE_NUMBER_at  unique_meals_purch_out  contact_cs_out  avg_time_per_visit_out  cancellation_before_noon_out  cancellation_after_noon_out  weekly_plan_out_low  weekly_plan_out_hi  early_deliveries_out  late_deliveries_out  avg_prep_vid_time_out  largest_order_size_out  master_class_attended_out  median_meal_rating_out  photos_viewed_low_out  photos_viewed_hi_out  rating_click  \\\n",
       "0        1880                  118                 addam.osgrey@passport.com              1                       0                   1      Addam            8                            90                        1                       86                   3                   4                            7                          5                          2                         1              2          6                 0                2               1                    0                165                   6                    11                    0                  15                        0                 0                       0               0                       0                             0                            1                    1                   0                     0                    0                      0                       0                          1                       0                      0                     0      0.272727   \n",
       "1        1495                   44                   aegon.blackfyre@jnj.com              1                       0                   1      Aegon            8                            90                        1                      125                   3                   3                            6                          3                          0                         1              1          6                 0                4               1                    0                150                   4                    13                   90                  33                        0                 0                       0               0                       0                             0                            1                    1                   0                     0                    0                      0                       0                          1                       0                      1                     0      0.230769   \n",
       "2        2572                   38       aegon.frey.(son.of.aenys)@gmail.com              1                       1                   1      Aegon           14                            80                        0                       58                   3                   1                            5                          3                          5                         0              2          6                 0                0               0                    0                 99                   3                    12                    0                  67                        0                 0                       0               0                       0                             1                            0                    1                   0                     0                    0                      0                       0                          0                       0                      0                     0      0.250000   \n",
       "3        1647                   76  aegon.targaryen.(son.of.rhaegar)@ibm.com              0                       1                   1      Aegon           11                            90                        0                       45                   3                   3                            8                         10                          3                         0              1          6                 5                4               0                    0                125                   3                    13                    0                  21                        0                 0                       0               0                       0                             0                            0                    1                   0                     1                    0                      0                       0                          0                       0                      0                     0      0.230769   \n",
       "4        1923                   65         aegon.v.targaryen@goldmansacs.com              1                       0                   1      Aegon           12                            90                        1                      106                   3                   3                            6                          9                          1                         1              2          6                 0                4               1                    0                135                   3                    13                  253                  29                        0                 0                       0               0                       0                             0                            1                    1                   0                     0                    0                      0                       0                          1                       0                      1                     0      0.230769   \n",
n",
       "1941     1515                   38                          yandry@yahoo.com              1                       1                   0     Yandry            9                            20                        0                      118                   3                   9                            6                          9                          1                         0              2          6                 4                3               0                    0                117                   4                    12                   98                  39                        0                 0                       0               0                       0                             0                            0                    1                   0                     1                    0                      0                       0                          0                       0                      1                     0      0.250000   \n",
       "1942     1432                   47                          yorkel@gmail.com              0                       1                   0     Yorkel            6                            20                        0                      105                   3                   8                            4                          8                          0                         0              3          5                 0                2               0                    0                 98                   3                    13                    0                  30                        0                 0                       0               0                       0                             0                            0                    1                   0                     0                    0                      0                       0                          0                       0                      0                     0      0.230769   \n",
       "1943      623                   14                     young.henly@gmail.com              1                       1                   0      Young           12                            30                        1                       90                   2                   6                           11                          1                          1                         0              1          6                 0                1               0                    0                 86                   3                    18                    0                  44                        0                 0                       0               1                       0                             0                            0                    1                   0                     0                    0                      0                       0                          1                       0                      0                     0      0.111111   \n",
       "1944      899                   15                     ysilla@protonmail.com              1                       0                   0     Ysilla           52                            20                        0                       97                   2                   4                           12                          6                          0                         0              2          6                 4                3               0                    0                 86                   1                    17                    0                  59                        0                 0                       0               1                       0                             0                            0                    1                   1                     1                    0                      0                       0                          0                       0                      0                     0      0.117647   \n",
       "1945     1255                   29                  ysilla.royce@hotmail.com              1                       1                   0     Ysilla            0                            10                        0                      182                   2                   2                            4                          2                          0                         0              2          7                 0                4               0                    0                115                   5                    14                    0                  43                        0                 0                       0               0                       0                             0                            0                    0                   0                     0                    0                      0                       0                          0                       0                      0                     0      0.142857   \n",
       "\n",
       "      avg_vid_time_larg_order  avg_vid_time_meals_order  avg_vid_time_master_class  avg_vid_time_rating  meals_ordered_rating  cross_followed  avg_vid_time_click  meals_ordered_click  median_meal_rating_out_2  total_meals_ordered_low_out  CONTACT_C_SERVICE_OUT  AVG_CLICK_PER_VISIT_OUT  MOBILE_LOGINS_bin  PC_LOGINS_bin  avg_spent_per_meal_lo  avg_spent_per_meal_mid  avg_spent_per_meal_hi     email_domain  junk  personal  professional  LogRevenue  photos_per_min  clicks_per_min  photos_per_min_hi  photos_per_min_out  \n",
       "0                         990                     19470                        165                  495                   354              90           15.000000            10.727273                         0                            1                      0                        1                  0              1                      0                       0                      0     passport.com     1         0             0           7               0               7                  0                   1  \n",
       "1                         600                      6600                        150                  450                   132              90           11.538462             3.384615                         0                            1                      0                        1                  0              1                      0                       0                      0          jnj.com     0         0             1           7              43               6                  0                   0  \n",
       "2                         297                      3762                          0                  297                   114              80            8.250000             3.166667                         0                            1                      0                        1                  0              1                      0                       1                      0        gmail.com     0         1             0           7               0              12                  0                   1  \n",
       "3                         375                      9500                          0                  375                   228              90            9.615385             5.846154                         0                            1                      0                        1                  0              1                      0                       0                      0          ibm.com     0         0             1           7               0              17                  0                   1  \n",
       "4                         405                      8775                        135                  405                   195              90           10.384615             5.000000                         0                            1                      0                        1                  0              1                      0                       0                      0  goldmansacs.com     0         0             1           7             143               7                  0                   0  \n",
n",
       "1941                      468                      4446                          0                  351                   114               0            9.750000             3.166667                         0                            1                      0                        1                  0              1                      0                       0                      0        yahoo.com     0         1             0           7              49               6                  0                   0  \n",
       "1942                      294                      4606                          0                  294                   141               0            7.538462             3.615385                         0                            1                      0                        1                  0              1                      0                       0                      0        gmail.com     0         1             0           7               0               7                  0                   1  \n",
       "1943                      258                      1204                         86                  172                    28               0            4.777778             0.777778                         0                            1                      1                        1                  0              1                      0                       0                      0        gmail.com     0         1             0           6               0              12                  0                   1  \n",
       "1944                       86                      1290                          0                  172                    30               0            5.058824             0.882353                         0                            1                      1                        1                  0              1                      0                       1                      0   protonmail.com     0         1             0           6               0              10                  0                   1  \n",
       "1945                      575                      3335                          0                  230                    58               0            8.214286             2.071429                         0                            1                      0                        1                  0              1                      0                       0                      0      hotmail.com     1         0             0           7               0               4                  0                   1  \n",
       "\n",
       "[1946 rows x 72 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chef_df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.1.\n",
    "Creating some new columns that will be helpful in conducting logistic regression. the column with surprising insight is photos per minute which I got by dividing average clicks per visit over average time per visit. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1008 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Log of REVENUE\n",
    "chef_df1['LogRevenue'] = np.log(chef_df1['REVENUE'])\n",
    "\n",
    "#Photos per unit time\n",
    "chef_df1['photos_per_min'] = 60*chef_df1['TOTAL_PHOTOS_VIEWED']/chef_df1['AVG_TIME_PER_SITE_VISIT']\n",
    "\n",
    "#Clicks per unit time\n",
    "chef_df1['clicks_per_min'] = 60*chef_df1['AVG_CLICKS_PER_VISIT']/chef_df1['AVG_TIME_PER_SITE_VISIT']\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15, 14))\n",
    "#Average clicks per visit\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.distplot(chef_df1['photos_per_min'],\n",
    "             bins  = 'fd',             color = 'y')\n",
    "plt.xlabel('photos_per_min')\n",
    "\n",
    "\n",
    "#chef_df1\n",
    "\n",
    "#chef_work1['CROSS_SELL_SUCCESS'] = [math.floor(i) for i in chef_work1['CROSS_SELL_SUCCESS']]\n",
    "chef_df1['LogRevenue'] = [math.floor(i) for i in chef_df1['LogRevenue']]\n",
    "chef_df1['photos_per_min'] = [math.floor(i) for i in chef_df1['photos_per_min']]\n",
    "chef_df1['clicks_per_min'] = [math.floor(i) for i in chef_df1['clicks_per_min']]\n",
    "\n",
    "\n",
    "\n",
    "#chef_df1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.2\n",
    "Finally, We are into building model. \n",
    "Building the X variables and assigning them as candidate dictionary. \n",
    "Not all variables were used for the sake of time and model precision."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "candidate_dict = {\n",
    "     # significant variables only\n",
    " 'logit_sig'    : [ 'TOTAL_MEALS_ORDERED',\n",
    "                    'UNIQUE_MEALS_PURCH',   \n",
    "                    'FOLLOWED_RECOMMENDATIONS_PCT',\n",
    "                    'CANCELLATIONS_BEFORE_NOON',\n",
    "                    'total_meals_ordered_out',\n",
    "                    'MOBILE_NUMBER_at',\n",
    "                    'weekly_plan_out_hi',                    \n",
    "                    'CONTACT_C_SERVICE_OUT',\n",
    "                    'cancellation_before_noon_out',\n",
    "                    'avg_spent_per_meal_hi']\n",
    "            }\n",
    "\n",
    "################################################################################\n",
    "# Train/Test Split\n",
    "################################################################################\n",
    "\n",
    "# use this space to set up testing and validation sets using train/test split\n",
    "\n",
    "# Note: Be sure to set test_size = 0.25\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "####################################################\n",
    "#LOGISTIC REGRESSION\n",
    "####################################################\n",
    "\n",
    "# train/test split with the full model\n",
    "chef_data   =  chef_df1.loc[ : , candidate_dict['logit_sig']]\n",
    "chef_target =  chef_df1.loc[ : , 'CROSS_SELL_SUCCESS']\n",
    "\n",
    "\n",
    "# This is the exact code we were using before\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "            chef_data,\n",
    "            chef_target,\n",
    "            test_size    = 0.25,\n",
    "            random_state = 802,\n",
    "            stratify     = chef_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chef_logit['TOTAL_MEALS_ORDERED'] +\n",
      "chef_logit['UNIQUE_MEALS_PURCH'] +\n",
      "chef_logit['FOLLOWED_RECOMMENDATIONS_PCT'] +\n",
      "chef_logit['CANCELLATIONS_BEFORE_NOON'] +\n",
      "chef_logit['total_meals_ordered_out'] +\n",
      "chef_logit['MOBILE_NUMBER_at'] +\n",
      "chef_logit['weekly_plan_out_hi'] +\n",
      "chef_logit['CONTACT_C_SERVICE_OUT'] +\n",
      "chef_logit['cancellation_before_noon_out'] +\n",
      "chef_logit['avg_spent_per_meal_hi'] +\n",
      "chef_logit['CROSS_SELL_SUCCESS'] +\n"
     ]
    }
   ],
   "source": [
    "chef_logit = pd.concat([X_train, y_train], axis = 1)\n",
    "\n",
    "X_train.shape\n",
    "y_train.shape\n",
    "\n",
    "for col in chef_logit.columns:\n",
    "    print(f\"\"\"chef_logit['{col}'] +\"\"\")\n",
    "    \n",
    "#chef_logit.drop('CROSS_SELL_SUCCESS', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training ACCURACY: 0.7005\n",
      "Testing  ACCURACY: 0.7166\n"
     ]
    }
   ],
   "source": [
    "################################################################################\n",
    "# Final Model (instantiate, fit, and predict)\n",
    "################################################################################\n",
    "\n",
    "# use this space to instantiate, fit, and predict on your final model\n",
    "# INSTANTIATING a logistic regression model\n",
    "logreg = LogisticRegression(solver = 'lbfgs',\n",
    "                            C = 1,\n",
    "                            random_state = 802)\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "logreg_fit = logreg.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "logreg_pred = logreg_fit.predict(X_test)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "################################################################################\n",
    "# Final Model Score (score)\n",
    "################################################################################\n",
    "\n",
    "# use this space to score your final model on the testing set\n",
    "# MAKE SURE TO SAVE YOUR TEST SCORE AS test_score\n",
    "# Example: test_score = final_model.score(X_test, y_test)\n",
    "\n",
    "# SCORING the results\n",
    "print('Training ACCURACY:', logreg_fit.score(X_train, y_train).round(4))\n",
    "print('Testing  ACCURACY:', logreg_fit.score(X_test, y_test).round(4))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Building different models:\n",
    "\n",
    "1. KNN Model; \n",
    "\n",
    "2. Classificaton Tree; I was unable to perform Classification Tree\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training ACCURACY: 0.77\n",
      "Testing  ACCURACY: 0.71\n",
      "AUC Score        : 0.684\n"
     ]
    }
   ],
   "source": [
    "# INSTANTIATING a KNN classification model with optimal neighbors\n",
    "knn_opt = KNeighborsClassifier(n_neighbors = 20)\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "knn_fit = knn_opt.fit(X_train,y_train)\n",
    "\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "knn_pred = knn_fit.predict(X_test)\n",
    "\n",
    "\n",
    "# SCORING the results\n",
    "print('Training ACCURACY:', knn_fit.score(X_train,y_train).round(3))\n",
    "print('Testing  ACCURACY:', knn_fit.score(X_test, y_test).round(3))\n",
    "print('AUC Score        :', roc_auc_score(y_true  = y_test,\n",
    "                                          y_score = knn_pred).round(3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I was unable to perform Classification Tree due to the problem with installing homebrew. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train/test split with the logit_sig variables\n",
    "#original_df_data   = chef.loc[ : , candidate_dict['logit_sig']]\n",
    "#original_df_target =  chef.loc[ : , 'CROSS_SELL_SUCCESS']\n",
    "\n",
    "\n",
    "# train/test split\n",
    "#X_train,X_test, y_train, y_test = train_test_split(\n",
    "          # original_df_data,\n",
    "           # original_df_target,\n",
    "            #random_state = 222,\n",
    "            #test_size    = 0.25,\n",
    "            #stratify     = original_df_target)\n",
    "\n",
    "# INSTANTIATING a classification tree object\n",
    "#sig_tree = DecisionTreeClassifier()\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "#sig_tree_fit = sig_tree.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING on new data\n",
    "#sig_tree_pred = sig_tree_fit.predict(X_test)\n",
    "\n",
    "\n",
    "# SCORING the model\n",
    "#print('Training ACCURACY:', sig_tree_fit.score(X_train, y_train).round(3))\n",
    "#print('Testing  ACCURACY:', sig_tree_fit.score(X_test, y_test).round(3))\n",
    "#print('AUC Score        :', roc_auc_score(y_true  = y_test,\n",
    "                                         # y_score = sig_tree_pred).round(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
